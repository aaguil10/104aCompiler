Terminals unused in grammar

   TOK_ROOT
   NOTIDENT
   NOTCHAR
   TOK_NEWSTRING
   TOK_FIELD
   TOK_DECLID
   TOK_TYPEID
   TOK_CALL
   TOK_STRINGCON
   TOK_CHARCON
   TOK_INTCON
   TOK_NEWARRAY
   TOK_PARAMLIST
   TOK_BLOCK
   TOK_VARDECL
   TOK_IFELSE
   TOK_NEG
   TOK_POS


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program structdef
    3        | program function
    4        | program statement
    5        | /* empty */

    6 structdef: TOK_KW_STRUCT TOK_KW_IDENT '{' mfielddecl '}'

    7 mfielddecl: mfielddecl fielddecl ';'
    8           | /* empty */

    9 fielddecl: basetype TOK_KW_IDENT
   10          | basetype TOK_sNEWARRAY TOK_KW_IDENT

   11 basetype: TOK_KW_VOID
   12         | TOK_KW_BOOL
   13         | TOK_KW_INT
   14         | TOK_KW_CHAR
   15         | TOK_KW_STRING
   16         | TOK_KW_IDENT

   17 funcargs: funcargs ',' identdecl
   18         | identdecl
   19         | /* empty */

   20 param: '(' funcargs ')'

   21 function: identdecl param block

   22 identdecl: basetype TOK_KW_IDENT
   23          | basetype TOK_sNEWARRAY TOK_KW_IDENT

   24 blokargs: blokargs statement
   25         | /* empty */

   26 block: '{' blokargs '}'
   27      | ';'

   28 statement: block
   29          | vardecl
   30          | while
   31          | ifelse
   32          | return
   33          | expr ';'

   34 vardecl: identdecl '=' expr ';'

   35 while: TOK_KW_WHILE '(' expr ')' statement

   36 ifelse: TOK_KW_IF '(' expr ')' statement
   37       | TOK_KW_IF '(' expr ')' statement TOK_KW_ELSE statement

   38 return: TOK_KW_RETURN ';'
   39       | TOK_KW_RETURN expr ';'

   40 expr: expr '+' expr
   41     | expr '-' expr
   42     | expr '*' expr
   43     | expr '/' expr
   44     | expr '%' expr
   45     | expr '=' expr
   46     | expr TOK_EQUALS expr
   47     | expr TOK_NEQUAL expr
   48     | expr '<' expr
   49     | expr TOK_GREAEQU expr
   50     | expr '>' expr
   51     | expr TOK_LESSEQU expr
   52     | '+' expr
   53     | '-' expr
   54     | '!' expr
   55     | TOK_KW_ORD expr
   56     | TOK_KW_CHR expr
   57     | allocator
   58     | call
   59     | '(' expr ')'
   60     | variable
   61     | constant

   62 allocator: TOK_KW_NEW TOK_KW_IDENT '(' ')'
   63          | TOK_KW_NEW TOK_KW_STRING '(' expr ')'
   64          | TOK_KW_NEW basetype '[' expr ']'

   65 args: args ',' expr
   66     | expr
   67     | /* empty */

   68 call: TOK_KW_IDENT '(' args ')'

   69 variable: TOK_KW_IDENT
   70         | expr '[' expr ']'
   71         | expr '.' TOK_KW_IDENT

   72 constant: TOK_LIT_INT
   73         | TOK_LIT_CHAR
   74         | TOK_LIT_STRING
   75         | TOK_KW_FALSE
   76         | TOK_KW_TRUE
   77         | TOK_KW_NULL


Terminals, with rules where they appear

$end (0) 0
'!' (33) 54
'%' (37) 44
'(' (40) 20 35 36 37 59 62 63 68
')' (41) 20 35 36 37 59 62 63 68
'*' (42) 42
'+' (43) 40 52
',' (44) 17 65
'-' (45) 41 53
'.' (46) 71
'/' (47) 43
';' (59) 7 27 33 34 38 39
'<' (60) 48
'=' (61) 34 45
'>' (62) 50
'[' (91) 64 70
']' (93) 64 70
'{' (123) 6 26
'}' (125) 6 26
error (256)
TOK_ROOT (258)
TOK_KW_IDENT (259) 6 9 10 16 22 23 62 68 69 71
NOTIDENT (260)
NOTCHAR (261)
TOK_KW_VOID (262) 11
TOK_KW_BOOL (263) 12
TOK_KW_CHAR (264) 14
TOK_KW_INT (265) 13
TOK_KW_STRING (266) 15 63
TOK_KW_WHILE (267) 35
TOK_KW_RETURN (268) 38 39
TOK_KW_FALSE (269) 75
TOK_KW_TRUE (270) 76
TOK_KW_NEW (271) 62 63 64
TOK_KW_STRUCT (272) 6
TOK_NEWSTRING (273)
TOK_KW_NULL (274) 77
TOK_LIT_INT (275) 72
TOK_LIT_CHAR (276) 73
TOK_LIT_STRING (277) 74
TOK_FIELD (278)
TOK_DECLID (279)
TOK_TYPEID (280)
TOK_CALL (281)
TOK_STRINGCON (282)
TOK_CHARCON (283)
TOK_INTCON (284)
TOK_NEWARRAY (285)
TOK_sNEWARRAY (286) 10 23
TOK_KW_ELSE (287) 37
TOK_KW_IF (288) 36 37
TOK_PARAMLIST (289)
TOK_BLOCK (290)
TOK_VARDECL (291)
TOK_IFELSE (292)
TOK_LESSEQU (293) 51
TOK_GREAEQU (294) 49
TOK_NEQUAL (295) 47
TOK_EQUALS (296) 46
TOK_KW_CHR (297) 56
TOK_KW_ORD (298) 55
TOK_NEG (299)
TOK_POS (300)


Nonterminals, with rules where they appear

$accept (64)
    on left: 0
start (65)
    on left: 1, on right: 0
program (66)
    on left: 2 3 4 5, on right: 1 2 3 4
structdef (67)
    on left: 6, on right: 2
mfielddecl (68)
    on left: 7 8, on right: 6 7
fielddecl (69)
    on left: 9 10, on right: 7
basetype (70)
    on left: 11 12 13 14 15 16, on right: 9 10 22 23 64
funcargs (71)
    on left: 17 18 19, on right: 17 20
param (72)
    on left: 20, on right: 21
function (73)
    on left: 21, on right: 3
identdecl (74)
    on left: 22 23, on right: 17 18 21 34
blokargs (75)
    on left: 24 25, on right: 24 26
block (76)
    on left: 26 27, on right: 21 28
statement (77)
    on left: 28 29 30 31 32 33, on right: 4 24 35 36 37
vardecl (78)
    on left: 34, on right: 29
while (79)
    on left: 35, on right: 30
ifelse (80)
    on left: 36 37, on right: 31
return (81)
    on left: 38 39, on right: 32
expr (82)
    on left: 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57
    58 59 60 61, on right: 33 34 35 36 37 39 40 41 42 43 44 45 46 47
    48 49 50 51 52 53 54 55 56 59 63 64 65 66 70 71
allocator (83)
    on left: 62 63 64, on right: 57
args (84)
    on left: 65 66 67, on right: 65 68
call (85)
    on left: 68, on right: 58
variable (86)
    on left: 69 70 71, on right: 60
constant (87)
    on left: 72 73 74 75 76 77, on right: 61


state 0

    0 $accept: . start $end

    $default  reduce using rule 5 (program)

    start    go to state 1
    program  go to state 2


state 1

    0 $accept: start . $end

    $end  shift, and go to state 3


state 2

    1 start: program .
    2 program: program . structdef
    3        | program . function
    4        | program . statement

    TOK_KW_IDENT    shift, and go to state 4
    TOK_KW_VOID     shift, and go to state 5
    TOK_KW_BOOL     shift, and go to state 6
    TOK_KW_CHAR     shift, and go to state 7
    TOK_KW_INT      shift, and go to state 8
    TOK_KW_STRING   shift, and go to state 9
    TOK_KW_WHILE    shift, and go to state 10
    TOK_KW_RETURN   shift, and go to state 11
    TOK_KW_FALSE    shift, and go to state 12
    TOK_KW_TRUE     shift, and go to state 13
    TOK_KW_NEW      shift, and go to state 14
    TOK_KW_STRUCT   shift, and go to state 15
    TOK_KW_NULL     shift, and go to state 16
    TOK_LIT_INT     shift, and go to state 17
    TOK_LIT_CHAR    shift, and go to state 18
    TOK_LIT_STRING  shift, and go to state 19
    ';'             shift, and go to state 20
    '{'             shift, and go to state 21
    '('             shift, and go to state 22
    TOK_KW_IF       shift, and go to state 23
    '+'             shift, and go to state 24
    '-'             shift, and go to state 25
    '!'             shift, and go to state 26
    TOK_KW_CHR      shift, and go to state 27
    TOK_KW_ORD      shift, and go to state 28

    $default  reduce using rule 1 (start)

    structdef  go to state 29
    basetype   go to state 30
    function   go to state 31
    identdecl  go to state 32
    block      go to state 33
    statement  go to state 34
    vardecl    go to state 35
    while      go to state 36
    ifelse     go to state 37
    return     go to state 38
    expr       go to state 39
    allocator  go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


state 3

    0 $accept: start $end .

    $default  accept


state 4

   16 basetype: TOK_KW_IDENT .
   68 call: TOK_KW_IDENT . '(' args ')'
   69 variable: TOK_KW_IDENT .

    '('  shift, and go to state 44

    TOK_KW_IDENT   reduce using rule 16 (basetype)
    TOK_sNEWARRAY  reduce using rule 16 (basetype)
    $default       reduce using rule 69 (variable)


state 5

   11 basetype: TOK_KW_VOID .

    $default  reduce using rule 11 (basetype)


state 6

   12 basetype: TOK_KW_BOOL .

    $default  reduce using rule 12 (basetype)


state 7

   14 basetype: TOK_KW_CHAR .

    $default  reduce using rule 14 (basetype)


state 8

   13 basetype: TOK_KW_INT .

    $default  reduce using rule 13 (basetype)


state 9

   15 basetype: TOK_KW_STRING .

    $default  reduce using rule 15 (basetype)


state 10

   35 while: TOK_KW_WHILE . '(' expr ')' statement

    '('  shift, and go to state 45


state 11

   38 return: TOK_KW_RETURN . ';'
   39       | TOK_KW_RETURN . expr ';'

    TOK_KW_IDENT    shift, and go to state 46
    TOK_KW_FALSE    shift, and go to state 12
    TOK_KW_TRUE     shift, and go to state 13
    TOK_KW_NEW      shift, and go to state 14
    TOK_KW_NULL     shift, and go to state 16
    TOK_LIT_INT     shift, and go to state 17
    TOK_LIT_CHAR    shift, and go to state 18
    TOK_LIT_STRING  shift, and go to state 19
    ';'             shift, and go to state 47
    '('             shift, and go to state 22
    '+'             shift, and go to state 24
    '-'             shift, and go to state 25
    '!'             shift, and go to state 26
    TOK_KW_CHR      shift, and go to state 27
    TOK_KW_ORD      shift, and go to state 28

    expr       go to state 48
    allocator  go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


state 12

   75 constant: TOK_KW_FALSE .

    $default  reduce using rule 75 (constant)


state 13

   76 constant: TOK_KW_TRUE .

    $default  reduce using rule 76 (constant)


state 14

   62 allocator: TOK_KW_NEW . TOK_KW_IDENT '(' ')'
   63          | TOK_KW_NEW . TOK_KW_STRING '(' expr ')'
   64          | TOK_KW_NEW . basetype '[' expr ']'

    TOK_KW_IDENT   shift, and go to state 49
    TOK_KW_VOID    shift, and go to state 5
    TOK_KW_BOOL    shift, and go to state 6
    TOK_KW_CHAR    shift, and go to state 7
    TOK_KW_INT     shift, and go to state 8
    TOK_KW_STRING  shift, and go to state 50

    basetype  go to state 51


state 15

    6 structdef: TOK_KW_STRUCT . TOK_KW_IDENT '{' mfielddecl '}'

    TOK_KW_IDENT  shift, and go to state 52


state 16

   77 constant: TOK_KW_NULL .

    $default  reduce using rule 77 (constant)


state 17

   72 constant: TOK_LIT_INT .

    $default  reduce using rule 72 (constant)


state 18

   73 constant: TOK_LIT_CHAR .

    $default  reduce using rule 73 (constant)


state 19

   74 constant: TOK_LIT_STRING .

    $default  reduce using rule 74 (constant)


state 20

   27 block: ';' .

    $default  reduce using rule 27 (block)


state 21

   26 block: '{' . blokargs '}'

    $default  reduce using rule 25 (blokargs)

    blokargs  go to state 53


state 22

   59 expr: '(' . expr ')'

    TOK_KW_IDENT    shift, and go to state 46
    TOK_KW_FALSE    shift, and go to state 12
    TOK_KW_TRUE     shift, and go to state 13
    TOK_KW_NEW      shift, and go to state 14
    TOK_KW_NULL     shift, and go to state 16
    TOK_LIT_INT     shift, and go to state 17
    TOK_LIT_CHAR    shift, and go to state 18
    TOK_LIT_STRING  shift, and go to state 19
    '('             shift, and go to state 22
    '+'             shift, and go to state 24
    '-'             shift, and go to state 25
    '!'             shift, and go to state 26
    TOK_KW_CHR      shift, and go to state 27
    TOK_KW_ORD      shift, and go to state 28

    expr       go to state 54
    allocator  go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


state 23

   36 ifelse: TOK_KW_IF . '(' expr ')' statement
   37       | TOK_KW_IF . '(' expr ')' statement TOK_KW_ELSE statement

    '('  shift, and go to state 55


state 24

   52 expr: '+' . expr

    TOK_KW_IDENT    shift, and go to state 46
    TOK_KW_FALSE    shift, and go to state 12
    TOK_KW_TRUE     shift, and go to state 13
    TOK_KW_NEW      shift, and go to state 14
    TOK_KW_NULL     shift, and go to state 16
    TOK_LIT_INT     shift, and go to state 17
    TOK_LIT_CHAR    shift, and go to state 18
    TOK_LIT_STRING  shift, and go to state 19
    '('             shift, and go to state 22
    '+'             shift, and go to state 24
    '-'             shift, and go to state 25
    '!'             shift, and go to state 26
    TOK_KW_CHR      shift, and go to state 27
    TOK_KW_ORD      shift, and go to state 28

    expr       go to state 56
    allocator  go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


state 25

   53 expr: '-' . expr

    TOK_KW_IDENT    shift, and go to state 46
    TOK_KW_FALSE    shift, and go to state 12
    TOK_KW_TRUE     shift, and go to state 13
    TOK_KW_NEW      shift, and go to state 14
    TOK_KW_NULL     shift, and go to state 16
    TOK_LIT_INT     shift, and go to state 17
    TOK_LIT_CHAR    shift, and go to state 18
    TOK_LIT_STRING  shift, and go to state 19
    '('             shift, and go to state 22
    '+'             shift, and go to state 24
    '-'             shift, and go to state 25
    '!'             shift, and go to state 26
    TOK_KW_CHR      shift, and go to state 27
    TOK_KW_ORD      shift, and go to state 28

    expr       go to state 57
    allocator  go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


state 26

   54 expr: '!' . expr

    TOK_KW_IDENT    shift, and go to state 46
    TOK_KW_FALSE    shift, and go to state 12
    TOK_KW_TRUE     shift, and go to state 13
    TOK_KW_NEW      shift, and go to state 14
    TOK_KW_NULL     shift, and go to state 16
    TOK_LIT_INT     shift, and go to state 17
    TOK_LIT_CHAR    shift, and go to state 18
    TOK_LIT_STRING  shift, and go to state 19
    '('             shift, and go to state 22
    '+'             shift, and go to state 24
    '-'             shift, and go to state 25
    '!'             shift, and go to state 26
    TOK_KW_CHR      shift, and go to state 27
    TOK_KW_ORD      shift, and go to state 28

    expr       go to state 58
    allocator  go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


state 27

   56 expr: TOK_KW_CHR . expr

    TOK_KW_IDENT    shift, and go to state 46
    TOK_KW_FALSE    shift, and go to state 12
    TOK_KW_TRUE     shift, and go to state 13
    TOK_KW_NEW      shift, and go to state 14
    TOK_KW_NULL     shift, and go to state 16
    TOK_LIT_INT     shift, and go to state 17
    TOK_LIT_CHAR    shift, and go to state 18
    TOK_LIT_STRING  shift, and go to state 19
    '('             shift, and go to state 22
    '+'             shift, and go to state 24
    '-'             shift, and go to state 25
    '!'             shift, and go to state 26
    TOK_KW_CHR      shift, and go to state 27
    TOK_KW_ORD      shift, and go to state 28

    expr       go to state 59
    allocator  go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


state 28

   55 expr: TOK_KW_ORD . expr

    TOK_KW_IDENT    shift, and go to state 46
    TOK_KW_FALSE    shift, and go to state 12
    TOK_KW_TRUE     shift, and go to state 13
    TOK_KW_NEW      shift, and go to state 14
    TOK_KW_NULL     shift, and go to state 16
    TOK_LIT_INT     shift, and go to state 17
    TOK_LIT_CHAR    shift, and go to state 18
    TOK_LIT_STRING  shift, and go to state 19
    '('             shift, and go to state 22
    '+'             shift, and go to state 24
    '-'             shift, and go to state 25
    '!'             shift, and go to state 26
    TOK_KW_CHR      shift, and go to state 27
    TOK_KW_ORD      shift, and go to state 28

    expr       go to state 60
    allocator  go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


state 29

    2 program: program structdef .

    $default  reduce using rule 2 (program)


state 30

   22 identdecl: basetype . TOK_KW_IDENT
   23          | basetype . TOK_sNEWARRAY TOK_KW_IDENT

    TOK_KW_IDENT   shift, and go to state 61
    TOK_sNEWARRAY  shift, and go to state 62


state 31

    3 program: program function .

    $default  reduce using rule 3 (program)


state 32

   21 function: identdecl . param block
   34 vardecl: identdecl . '=' expr ';'

    '('  shift, and go to state 63
    '='  shift, and go to state 64

    param  go to state 65


state 33

   28 statement: block .

    $default  reduce using rule 28 (statement)


state 34

    4 program: program statement .

    $default  reduce using rule 4 (program)


state 35

   29 statement: vardecl .

    $default  reduce using rule 29 (statement)


state 36

   30 statement: while .

    $default  reduce using rule 30 (statement)


state 37

   31 statement: ifelse .

    $default  reduce using rule 31 (statement)


state 38

   32 statement: return .

    $default  reduce using rule 32 (statement)


state 39

   33 statement: expr . ';'
   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_EQUALS expr
   47     | expr . TOK_NEQUAL expr
   48     | expr . '<' expr
   49     | expr . TOK_GREAEQU expr
   50     | expr . '>' expr
   51     | expr . TOK_LESSEQU expr
   70 variable: expr . '[' expr ']'
   71         | expr . '.' TOK_KW_IDENT

    ';'          shift, and go to state 66
    '='          shift, and go to state 67
    '<'          shift, and go to state 68
    '>'          shift, and go to state 69
    TOK_LESSEQU  shift, and go to state 70
    TOK_GREAEQU  shift, and go to state 71
    TOK_NEQUAL   shift, and go to state 72
    TOK_EQUALS   shift, and go to state 73
    '+'          shift, and go to state 74
    '-'          shift, and go to state 75
    '*'          shift, and go to state 76
    '/'          shift, and go to state 77
    '%'          shift, and go to state 78
    '['          shift, and go to state 79
    '.'          shift, and go to state 80


state 40

   57 expr: allocator .

    $default  reduce using rule 57 (expr)


state 41

   58 expr: call .

    $default  reduce using rule 58 (expr)


state 42

   60 expr: variable .

    $default  reduce using rule 60 (expr)


state 43

   61 expr: constant .

    $default  reduce using rule 61 (expr)


state 44

   68 call: TOK_KW_IDENT '(' . args ')'

    TOK_KW_IDENT    shift, and go to state 46
    TOK_KW_FALSE    shift, and go to state 12
    TOK_KW_TRUE     shift, and go to state 13
    TOK_KW_NEW      shift, and go to state 14
    TOK_KW_NULL     shift, and go to state 16
    TOK_LIT_INT     shift, and go to state 17
    TOK_LIT_CHAR    shift, and go to state 18
    TOK_LIT_STRING  shift, and go to state 19
    '('             shift, and go to state 22
    '+'             shift, and go to state 24
    '-'             shift, and go to state 25
    '!'             shift, and go to state 26
    TOK_KW_CHR      shift, and go to state 27
    TOK_KW_ORD      shift, and go to state 28

    $default  reduce using rule 67 (args)

    expr       go to state 81
    allocator  go to state 40
    args       go to state 82
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


state 45

   35 while: TOK_KW_WHILE '(' . expr ')' statement

    TOK_KW_IDENT    shift, and go to state 46
    TOK_KW_FALSE    shift, and go to state 12
    TOK_KW_TRUE     shift, and go to state 13
    TOK_KW_NEW      shift, and go to state 14
    TOK_KW_NULL     shift, and go to state 16
    TOK_LIT_INT     shift, and go to state 17
    TOK_LIT_CHAR    shift, and go to state 18
    TOK_LIT_STRING  shift, and go to state 19
    '('             shift, and go to state 22
    '+'             shift, and go to state 24
    '-'             shift, and go to state 25
    '!'             shift, and go to state 26
    TOK_KW_CHR      shift, and go to state 27
    TOK_KW_ORD      shift, and go to state 28

    expr       go to state 83
    allocator  go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


state 46

   68 call: TOK_KW_IDENT . '(' args ')'
   69 variable: TOK_KW_IDENT .

    '('  shift, and go to state 44

    $default  reduce using rule 69 (variable)


state 47

   38 return: TOK_KW_RETURN ';' .

    $default  reduce using rule 38 (return)


state 48

   39 return: TOK_KW_RETURN expr . ';'
   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_EQUALS expr
   47     | expr . TOK_NEQUAL expr
   48     | expr . '<' expr
   49     | expr . TOK_GREAEQU expr
   50     | expr . '>' expr
   51     | expr . TOK_LESSEQU expr
   70 variable: expr . '[' expr ']'
   71         | expr . '.' TOK_KW_IDENT

    ';'          shift, and go to state 84
    '='          shift, and go to state 67
    '<'          shift, and go to state 68
    '>'          shift, and go to state 69
    TOK_LESSEQU  shift, and go to state 70
    TOK_GREAEQU  shift, and go to state 71
    TOK_NEQUAL   shift, and go to state 72
    TOK_EQUALS   shift, and go to state 73
    '+'          shift, and go to state 74
    '-'          shift, and go to state 75
    '*'          shift, and go to state 76
    '/'          shift, and go to state 77
    '%'          shift, and go to state 78
    '['          shift, and go to state 79
    '.'          shift, and go to state 80


state 49

   16 basetype: TOK_KW_IDENT .
   62 allocator: TOK_KW_NEW TOK_KW_IDENT . '(' ')'

    '('  shift, and go to state 85

    $default  reduce using rule 16 (basetype)


state 50

   15 basetype: TOK_KW_STRING .
   63 allocator: TOK_KW_NEW TOK_KW_STRING . '(' expr ')'

    '('  shift, and go to state 86

    $default  reduce using rule 15 (basetype)


state 51

   64 allocator: TOK_KW_NEW basetype . '[' expr ']'

    '['  shift, and go to state 87


state 52

    6 structdef: TOK_KW_STRUCT TOK_KW_IDENT . '{' mfielddecl '}'

    '{'  shift, and go to state 88


state 53

   24 blokargs: blokargs . statement
   26 block: '{' blokargs . '}'

    TOK_KW_IDENT    shift, and go to state 4
    TOK_KW_VOID     shift, and go to state 5
    TOK_KW_BOOL     shift, and go to state 6
    TOK_KW_CHAR     shift, and go to state 7
    TOK_KW_INT      shift, and go to state 8
    TOK_KW_STRING   shift, and go to state 9
    TOK_KW_WHILE    shift, and go to state 10
    TOK_KW_RETURN   shift, and go to state 11
    TOK_KW_FALSE    shift, and go to state 12
    TOK_KW_TRUE     shift, and go to state 13
    TOK_KW_NEW      shift, and go to state 14
    TOK_KW_NULL     shift, and go to state 16
    TOK_LIT_INT     shift, and go to state 17
    TOK_LIT_CHAR    shift, and go to state 18
    TOK_LIT_STRING  shift, and go to state 19
    ';'             shift, and go to state 20
    '}'             shift, and go to state 89
    '{'             shift, and go to state 21
    '('             shift, and go to state 22
    TOK_KW_IF       shift, and go to state 23
    '+'             shift, and go to state 24
    '-'             shift, and go to state 25
    '!'             shift, and go to state 26
    TOK_KW_CHR      shift, and go to state 27
    TOK_KW_ORD      shift, and go to state 28

    basetype   go to state 30
    identdecl  go to state 90
    block      go to state 33
    statement  go to state 91
    vardecl    go to state 35
    while      go to state 36
    ifelse     go to state 37
    return     go to state 38
    expr       go to state 39
    allocator  go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


state 54

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_EQUALS expr
   47     | expr . TOK_NEQUAL expr
   48     | expr . '<' expr
   49     | expr . TOK_GREAEQU expr
   50     | expr . '>' expr
   51     | expr . TOK_LESSEQU expr
   59     | '(' expr . ')'
   70 variable: expr . '[' expr ']'
   71         | expr . '.' TOK_KW_IDENT

    ')'          shift, and go to state 92
    '='          shift, and go to state 67
    '<'          shift, and go to state 68
    '>'          shift, and go to state 69
    TOK_LESSEQU  shift, and go to state 70
    TOK_GREAEQU  shift, and go to state 71
    TOK_NEQUAL   shift, and go to state 72
    TOK_EQUALS   shift, and go to state 73
    '+'          shift, and go to state 74
    '-'          shift, and go to state 75
    '*'          shift, and go to state 76
    '/'          shift, and go to state 77
    '%'          shift, and go to state 78
    '['          shift, and go to state 79
    '.'          shift, and go to state 80


state 55

   36 ifelse: TOK_KW_IF '(' . expr ')' statement
   37       | TOK_KW_IF '(' . expr ')' statement TOK_KW_ELSE statement

    TOK_KW_IDENT    shift, and go to state 46
    TOK_KW_FALSE    shift, and go to state 12
    TOK_KW_TRUE     shift, and go to state 13
    TOK_KW_NEW      shift, and go to state 14
    TOK_KW_NULL     shift, and go to state 16
    TOK_LIT_INT     shift, and go to state 17
    TOK_LIT_CHAR    shift, and go to state 18
    TOK_LIT_STRING  shift, and go to state 19
    '('             shift, and go to state 22
    '+'             shift, and go to state 24
    '-'             shift, and go to state 25
    '!'             shift, and go to state 26
    TOK_KW_CHR      shift, and go to state 27
    TOK_KW_ORD      shift, and go to state 28

    expr       go to state 93
    allocator  go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


state 56

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_EQUALS expr
   47     | expr . TOK_NEQUAL expr
   48     | expr . '<' expr
   49     | expr . TOK_GREAEQU expr
   50     | expr . '>' expr
   51     | expr . TOK_LESSEQU expr
   52     | '+' expr .
   70 variable: expr . '[' expr ']'
   71         | expr . '.' TOK_KW_IDENT

    '*'  shift, and go to state 76
    '/'  shift, and go to state 77
    '%'  shift, and go to state 78
    '['  shift, and go to state 79
    '.'  shift, and go to state 80

    $default  reduce using rule 52 (expr)


state 57

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_EQUALS expr
   47     | expr . TOK_NEQUAL expr
   48     | expr . '<' expr
   49     | expr . TOK_GREAEQU expr
   50     | expr . '>' expr
   51     | expr . TOK_LESSEQU expr
   53     | '-' expr .
   70 variable: expr . '[' expr ']'
   71         | expr . '.' TOK_KW_IDENT

    '*'  shift, and go to state 76
    '/'  shift, and go to state 77
    '%'  shift, and go to state 78
    '['  shift, and go to state 79
    '.'  shift, and go to state 80

    $default  reduce using rule 53 (expr)


state 58

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_EQUALS expr
   47     | expr . TOK_NEQUAL expr
   48     | expr . '<' expr
   49     | expr . TOK_GREAEQU expr
   50     | expr . '>' expr
   51     | expr . TOK_LESSEQU expr
   54     | '!' expr .
   70 variable: expr . '[' expr ']'
   71         | expr . '.' TOK_KW_IDENT

    '['  shift, and go to state 79
    '.'  shift, and go to state 80

    $default  reduce using rule 54 (expr)


state 59

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_EQUALS expr
   47     | expr . TOK_NEQUAL expr
   48     | expr . '<' expr
   49     | expr . TOK_GREAEQU expr
   50     | expr . '>' expr
   51     | expr . TOK_LESSEQU expr
   56     | TOK_KW_CHR expr .
   70 variable: expr . '[' expr ']'
   71         | expr . '.' TOK_KW_IDENT

    '['  shift, and go to state 79
    '.'  shift, and go to state 80

    $default  reduce using rule 56 (expr)


state 60

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_EQUALS expr
   47     | expr . TOK_NEQUAL expr
   48     | expr . '<' expr
   49     | expr . TOK_GREAEQU expr
   50     | expr . '>' expr
   51     | expr . TOK_LESSEQU expr
   55     | TOK_KW_ORD expr .
   70 variable: expr . '[' expr ']'
   71         | expr . '.' TOK_KW_IDENT

    '['  shift, and go to state 79
    '.'  shift, and go to state 80

    $default  reduce using rule 55 (expr)


state 61

   22 identdecl: basetype TOK_KW_IDENT .

    $default  reduce using rule 22 (identdecl)


state 62

   23 identdecl: basetype TOK_sNEWARRAY . TOK_KW_IDENT

    TOK_KW_IDENT  shift, and go to state 94


state 63

   20 param: '(' . funcargs ')'

    TOK_KW_IDENT   shift, and go to state 95
    TOK_KW_VOID    shift, and go to state 5
    TOK_KW_BOOL    shift, and go to state 6
    TOK_KW_CHAR    shift, and go to state 7
    TOK_KW_INT     shift, and go to state 8
    TOK_KW_STRING  shift, and go to state 9

    $default  reduce using rule 19 (funcargs)

    basetype   go to state 30
    funcargs   go to state 96
    identdecl  go to state 97


state 64

   34 vardecl: identdecl '=' . expr ';'

    TOK_KW_IDENT    shift, and go to state 46
    TOK_KW_FALSE    shift, and go to state 12
    TOK_KW_TRUE     shift, and go to state 13
    TOK_KW_NEW      shift, and go to state 14
    TOK_KW_NULL     shift, and go to state 16
    TOK_LIT_INT     shift, and go to state 17
    TOK_LIT_CHAR    shift, and go to state 18
    TOK_LIT_STRING  shift, and go to state 19
    '('             shift, and go to state 22
    '+'             shift, and go to state 24
    '-'             shift, and go to state 25
    '!'             shift, and go to state 26
    TOK_KW_CHR      shift, and go to state 27
    TOK_KW_ORD      shift, and go to state 28

    expr       go to state 98
    allocator  go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


state 65

   21 function: identdecl param . block

    ';'  shift, and go to state 20
    '{'  shift, and go to state 21

    block  go to state 99


state 66

   33 statement: expr ';' .

    $default  reduce using rule 33 (statement)


state 67

   45 expr: expr '=' . expr

    TOK_KW_IDENT    shift, and go to state 46
    TOK_KW_FALSE    shift, and go to state 12
    TOK_KW_TRUE     shift, and go to state 13
    TOK_KW_NEW      shift, and go to state 14
    TOK_KW_NULL     shift, and go to state 16
    TOK_LIT_INT     shift, and go to state 17
    TOK_LIT_CHAR    shift, and go to state 18
    TOK_LIT_STRING  shift, and go to state 19
    '('             shift, and go to state 22
    '+'             shift, and go to state 24
    '-'             shift, and go to state 25
    '!'             shift, and go to state 26
    TOK_KW_CHR      shift, and go to state 27
    TOK_KW_ORD      shift, and go to state 28

    expr       go to state 100
    allocator  go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


state 68

   48 expr: expr '<' . expr

    TOK_KW_IDENT    shift, and go to state 46
    TOK_KW_FALSE    shift, and go to state 12
    TOK_KW_TRUE     shift, and go to state 13
    TOK_KW_NEW      shift, and go to state 14
    TOK_KW_NULL     shift, and go to state 16
    TOK_LIT_INT     shift, and go to state 17
    TOK_LIT_CHAR    shift, and go to state 18
    TOK_LIT_STRING  shift, and go to state 19
    '('             shift, and go to state 22
    '+'             shift, and go to state 24
    '-'             shift, and go to state 25
    '!'             shift, and go to state 26
    TOK_KW_CHR      shift, and go to state 27
    TOK_KW_ORD      shift, and go to state 28

    expr       go to state 101
    allocator  go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


state 69

   50 expr: expr '>' . expr

    TOK_KW_IDENT    shift, and go to state 46
    TOK_KW_FALSE    shift, and go to state 12
    TOK_KW_TRUE     shift, and go to state 13
    TOK_KW_NEW      shift, and go to state 14
    TOK_KW_NULL     shift, and go to state 16
    TOK_LIT_INT     shift, and go to state 17
    TOK_LIT_CHAR    shift, and go to state 18
    TOK_LIT_STRING  shift, and go to state 19
    '('             shift, and go to state 22
    '+'             shift, and go to state 24
    '-'             shift, and go to state 25
    '!'             shift, and go to state 26
    TOK_KW_CHR      shift, and go to state 27
    TOK_KW_ORD      shift, and go to state 28

    expr       go to state 102
    allocator  go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


state 70

   51 expr: expr TOK_LESSEQU . expr

    TOK_KW_IDENT    shift, and go to state 46
    TOK_KW_FALSE    shift, and go to state 12
    TOK_KW_TRUE     shift, and go to state 13
    TOK_KW_NEW      shift, and go to state 14
    TOK_KW_NULL     shift, and go to state 16
    TOK_LIT_INT     shift, and go to state 17
    TOK_LIT_CHAR    shift, and go to state 18
    TOK_LIT_STRING  shift, and go to state 19
    '('             shift, and go to state 22
    '+'             shift, and go to state 24
    '-'             shift, and go to state 25
    '!'             shift, and go to state 26
    TOK_KW_CHR      shift, and go to state 27
    TOK_KW_ORD      shift, and go to state 28

    expr       go to state 103
    allocator  go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


state 71

   49 expr: expr TOK_GREAEQU . expr

    TOK_KW_IDENT    shift, and go to state 46
    TOK_KW_FALSE    shift, and go to state 12
    TOK_KW_TRUE     shift, and go to state 13
    TOK_KW_NEW      shift, and go to state 14
    TOK_KW_NULL     shift, and go to state 16
    TOK_LIT_INT     shift, and go to state 17
    TOK_LIT_CHAR    shift, and go to state 18
    TOK_LIT_STRING  shift, and go to state 19
    '('             shift, and go to state 22
    '+'             shift, and go to state 24
    '-'             shift, and go to state 25
    '!'             shift, and go to state 26
    TOK_KW_CHR      shift, and go to state 27
    TOK_KW_ORD      shift, and go to state 28

    expr       go to state 104
    allocator  go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


state 72

   47 expr: expr TOK_NEQUAL . expr

    TOK_KW_IDENT    shift, and go to state 46
    TOK_KW_FALSE    shift, and go to state 12
    TOK_KW_TRUE     shift, and go to state 13
    TOK_KW_NEW      shift, and go to state 14
    TOK_KW_NULL     shift, and go to state 16
    TOK_LIT_INT     shift, and go to state 17
    TOK_LIT_CHAR    shift, and go to state 18
    TOK_LIT_STRING  shift, and go to state 19
    '('             shift, and go to state 22
    '+'             shift, and go to state 24
    '-'             shift, and go to state 25
    '!'             shift, and go to state 26
    TOK_KW_CHR      shift, and go to state 27
    TOK_KW_ORD      shift, and go to state 28

    expr       go to state 105
    allocator  go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


state 73

   46 expr: expr TOK_EQUALS . expr

    TOK_KW_IDENT    shift, and go to state 46
    TOK_KW_FALSE    shift, and go to state 12
    TOK_KW_TRUE     shift, and go to state 13
    TOK_KW_NEW      shift, and go to state 14
    TOK_KW_NULL     shift, and go to state 16
    TOK_LIT_INT     shift, and go to state 17
    TOK_LIT_CHAR    shift, and go to state 18
    TOK_LIT_STRING  shift, and go to state 19
    '('             shift, and go to state 22
    '+'             shift, and go to state 24
    '-'             shift, and go to state 25
    '!'             shift, and go to state 26
    TOK_KW_CHR      shift, and go to state 27
    TOK_KW_ORD      shift, and go to state 28

    expr       go to state 106
    allocator  go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


state 74

   40 expr: expr '+' . expr

    TOK_KW_IDENT    shift, and go to state 46
    TOK_KW_FALSE    shift, and go to state 12
    TOK_KW_TRUE     shift, and go to state 13
    TOK_KW_NEW      shift, and go to state 14
    TOK_KW_NULL     shift, and go to state 16
    TOK_LIT_INT     shift, and go to state 17
    TOK_LIT_CHAR    shift, and go to state 18
    TOK_LIT_STRING  shift, and go to state 19
    '('             shift, and go to state 22
    '+'             shift, and go to state 24
    '-'             shift, and go to state 25
    '!'             shift, and go to state 26
    TOK_KW_CHR      shift, and go to state 27
    TOK_KW_ORD      shift, and go to state 28

    expr       go to state 107
    allocator  go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


state 75

   41 expr: expr '-' . expr

    TOK_KW_IDENT    shift, and go to state 46
    TOK_KW_FALSE    shift, and go to state 12
    TOK_KW_TRUE     shift, and go to state 13
    TOK_KW_NEW      shift, and go to state 14
    TOK_KW_NULL     shift, and go to state 16
    TOK_LIT_INT     shift, and go to state 17
    TOK_LIT_CHAR    shift, and go to state 18
    TOK_LIT_STRING  shift, and go to state 19
    '('             shift, and go to state 22
    '+'             shift, and go to state 24
    '-'             shift, and go to state 25
    '!'             shift, and go to state 26
    TOK_KW_CHR      shift, and go to state 27
    TOK_KW_ORD      shift, and go to state 28

    expr       go to state 108
    allocator  go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


state 76

   42 expr: expr '*' . expr

    TOK_KW_IDENT    shift, and go to state 46
    TOK_KW_FALSE    shift, and go to state 12
    TOK_KW_TRUE     shift, and go to state 13
    TOK_KW_NEW      shift, and go to state 14
    TOK_KW_NULL     shift, and go to state 16
    TOK_LIT_INT     shift, and go to state 17
    TOK_LIT_CHAR    shift, and go to state 18
    TOK_LIT_STRING  shift, and go to state 19
    '('             shift, and go to state 22
    '+'             shift, and go to state 24
    '-'             shift, and go to state 25
    '!'             shift, and go to state 26
    TOK_KW_CHR      shift, and go to state 27
    TOK_KW_ORD      shift, and go to state 28

    expr       go to state 109
    allocator  go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


state 77

   43 expr: expr '/' . expr

    TOK_KW_IDENT    shift, and go to state 46
    TOK_KW_FALSE    shift, and go to state 12
    TOK_KW_TRUE     shift, and go to state 13
    TOK_KW_NEW      shift, and go to state 14
    TOK_KW_NULL     shift, and go to state 16
    TOK_LIT_INT     shift, and go to state 17
    TOK_LIT_CHAR    shift, and go to state 18
    TOK_LIT_STRING  shift, and go to state 19
    '('             shift, and go to state 22
    '+'             shift, and go to state 24
    '-'             shift, and go to state 25
    '!'             shift, and go to state 26
    TOK_KW_CHR      shift, and go to state 27
    TOK_KW_ORD      shift, and go to state 28

    expr       go to state 110
    allocator  go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


state 78

   44 expr: expr '%' . expr

    TOK_KW_IDENT    shift, and go to state 46
    TOK_KW_FALSE    shift, and go to state 12
    TOK_KW_TRUE     shift, and go to state 13
    TOK_KW_NEW      shift, and go to state 14
    TOK_KW_NULL     shift, and go to state 16
    TOK_LIT_INT     shift, and go to state 17
    TOK_LIT_CHAR    shift, and go to state 18
    TOK_LIT_STRING  shift, and go to state 19
    '('             shift, and go to state 22
    '+'             shift, and go to state 24
    '-'             shift, and go to state 25
    '!'             shift, and go to state 26
    TOK_KW_CHR      shift, and go to state 27
    TOK_KW_ORD      shift, and go to state 28

    expr       go to state 111
    allocator  go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


state 79

   70 variable: expr '[' . expr ']'

    TOK_KW_IDENT    shift, and go to state 46
    TOK_KW_FALSE    shift, and go to state 12
    TOK_KW_TRUE     shift, and go to state 13
    TOK_KW_NEW      shift, and go to state 14
    TOK_KW_NULL     shift, and go to state 16
    TOK_LIT_INT     shift, and go to state 17
    TOK_LIT_CHAR    shift, and go to state 18
    TOK_LIT_STRING  shift, and go to state 19
    '('             shift, and go to state 22
    '+'             shift, and go to state 24
    '-'             shift, and go to state 25
    '!'             shift, and go to state 26
    TOK_KW_CHR      shift, and go to state 27
    TOK_KW_ORD      shift, and go to state 28

    expr       go to state 112
    allocator  go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


state 80

   71 variable: expr '.' . TOK_KW_IDENT

    TOK_KW_IDENT  shift, and go to state 113


state 81

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_EQUALS expr
   47     | expr . TOK_NEQUAL expr
   48     | expr . '<' expr
   49     | expr . TOK_GREAEQU expr
   50     | expr . '>' expr
   51     | expr . TOK_LESSEQU expr
   66 args: expr .
   70 variable: expr . '[' expr ']'
   71         | expr . '.' TOK_KW_IDENT

    '='          shift, and go to state 67
    '<'          shift, and go to state 68
    '>'          shift, and go to state 69
    TOK_LESSEQU  shift, and go to state 70
    TOK_GREAEQU  shift, and go to state 71
    TOK_NEQUAL   shift, and go to state 72
    TOK_EQUALS   shift, and go to state 73
    '+'          shift, and go to state 74
    '-'          shift, and go to state 75
    '*'          shift, and go to state 76
    '/'          shift, and go to state 77
    '%'          shift, and go to state 78
    '['          shift, and go to state 79
    '.'          shift, and go to state 80

    $default  reduce using rule 66 (args)


state 82

   65 args: args . ',' expr
   68 call: TOK_KW_IDENT '(' args . ')'

    ','  shift, and go to state 114
    ')'  shift, and go to state 115


state 83

   35 while: TOK_KW_WHILE '(' expr . ')' statement
   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_EQUALS expr
   47     | expr . TOK_NEQUAL expr
   48     | expr . '<' expr
   49     | expr . TOK_GREAEQU expr
   50     | expr . '>' expr
   51     | expr . TOK_LESSEQU expr
   70 variable: expr . '[' expr ']'
   71         | expr . '.' TOK_KW_IDENT

    ')'          shift, and go to state 116
    '='          shift, and go to state 67
    '<'          shift, and go to state 68
    '>'          shift, and go to state 69
    TOK_LESSEQU  shift, and go to state 70
    TOK_GREAEQU  shift, and go to state 71
    TOK_NEQUAL   shift, and go to state 72
    TOK_EQUALS   shift, and go to state 73
    '+'          shift, and go to state 74
    '-'          shift, and go to state 75
    '*'          shift, and go to state 76
    '/'          shift, and go to state 77
    '%'          shift, and go to state 78
    '['          shift, and go to state 79
    '.'          shift, and go to state 80


state 84

   39 return: TOK_KW_RETURN expr ';' .

    $default  reduce using rule 39 (return)


state 85

   62 allocator: TOK_KW_NEW TOK_KW_IDENT '(' . ')'

    ')'  shift, and go to state 117


state 86

   63 allocator: TOK_KW_NEW TOK_KW_STRING '(' . expr ')'

    TOK_KW_IDENT    shift, and go to state 46
    TOK_KW_FALSE    shift, and go to state 12
    TOK_KW_TRUE     shift, and go to state 13
    TOK_KW_NEW      shift, and go to state 14
    TOK_KW_NULL     shift, and go to state 16
    TOK_LIT_INT     shift, and go to state 17
    TOK_LIT_CHAR    shift, and go to state 18
    TOK_LIT_STRING  shift, and go to state 19
    '('             shift, and go to state 22
    '+'             shift, and go to state 24
    '-'             shift, and go to state 25
    '!'             shift, and go to state 26
    TOK_KW_CHR      shift, and go to state 27
    TOK_KW_ORD      shift, and go to state 28

    expr       go to state 118
    allocator  go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


state 87

   64 allocator: TOK_KW_NEW basetype '[' . expr ']'

    TOK_KW_IDENT    shift, and go to state 46
    TOK_KW_FALSE    shift, and go to state 12
    TOK_KW_TRUE     shift, and go to state 13
    TOK_KW_NEW      shift, and go to state 14
    TOK_KW_NULL     shift, and go to state 16
    TOK_LIT_INT     shift, and go to state 17
    TOK_LIT_CHAR    shift, and go to state 18
    TOK_LIT_STRING  shift, and go to state 19
    '('             shift, and go to state 22
    '+'             shift, and go to state 24
    '-'             shift, and go to state 25
    '!'             shift, and go to state 26
    TOK_KW_CHR      shift, and go to state 27
    TOK_KW_ORD      shift, and go to state 28

    expr       go to state 119
    allocator  go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


state 88

    6 structdef: TOK_KW_STRUCT TOK_KW_IDENT '{' . mfielddecl '}'

    $default  reduce using rule 8 (mfielddecl)

    mfielddecl  go to state 120


state 89

   26 block: '{' blokargs '}' .

    $default  reduce using rule 26 (block)


state 90

   34 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 64


state 91

   24 blokargs: blokargs statement .

    $default  reduce using rule 24 (blokargs)


state 92

   59 expr: '(' expr ')' .

    $default  reduce using rule 59 (expr)


state 93

   36 ifelse: TOK_KW_IF '(' expr . ')' statement
   37       | TOK_KW_IF '(' expr . ')' statement TOK_KW_ELSE statement
   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_EQUALS expr
   47     | expr . TOK_NEQUAL expr
   48     | expr . '<' expr
   49     | expr . TOK_GREAEQU expr
   50     | expr . '>' expr
   51     | expr . TOK_LESSEQU expr
   70 variable: expr . '[' expr ']'
   71         | expr . '.' TOK_KW_IDENT

    ')'          shift, and go to state 121
    '='          shift, and go to state 67
    '<'          shift, and go to state 68
    '>'          shift, and go to state 69
    TOK_LESSEQU  shift, and go to state 70
    TOK_GREAEQU  shift, and go to state 71
    TOK_NEQUAL   shift, and go to state 72
    TOK_EQUALS   shift, and go to state 73
    '+'          shift, and go to state 74
    '-'          shift, and go to state 75
    '*'          shift, and go to state 76
    '/'          shift, and go to state 77
    '%'          shift, and go to state 78
    '['          shift, and go to state 79
    '.'          shift, and go to state 80


state 94

   23 identdecl: basetype TOK_sNEWARRAY TOK_KW_IDENT .

    $default  reduce using rule 23 (identdecl)


state 95

   16 basetype: TOK_KW_IDENT .

    $default  reduce using rule 16 (basetype)


state 96

   17 funcargs: funcargs . ',' identdecl
   20 param: '(' funcargs . ')'

    ','  shift, and go to state 122
    ')'  shift, and go to state 123


state 97

   18 funcargs: identdecl .

    $default  reduce using rule 18 (funcargs)


state 98

   34 vardecl: identdecl '=' expr . ';'
   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_EQUALS expr
   47     | expr . TOK_NEQUAL expr
   48     | expr . '<' expr
   49     | expr . TOK_GREAEQU expr
   50     | expr . '>' expr
   51     | expr . TOK_LESSEQU expr
   70 variable: expr . '[' expr ']'
   71         | expr . '.' TOK_KW_IDENT

    ';'          shift, and go to state 124
    '='          shift, and go to state 67
    '<'          shift, and go to state 68
    '>'          shift, and go to state 69
    TOK_LESSEQU  shift, and go to state 70
    TOK_GREAEQU  shift, and go to state 71
    TOK_NEQUAL   shift, and go to state 72
    TOK_EQUALS   shift, and go to state 73
    '+'          shift, and go to state 74
    '-'          shift, and go to state 75
    '*'          shift, and go to state 76
    '/'          shift, and go to state 77
    '%'          shift, and go to state 78
    '['          shift, and go to state 79
    '.'          shift, and go to state 80


state 99

   21 function: identdecl param block .

    $default  reduce using rule 21 (function)


state 100

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   45     | expr '=' expr .
   46     | expr . TOK_EQUALS expr
   47     | expr . TOK_NEQUAL expr
   48     | expr . '<' expr
   49     | expr . TOK_GREAEQU expr
   50     | expr . '>' expr
   51     | expr . TOK_LESSEQU expr
   70 variable: expr . '[' expr ']'
   71         | expr . '.' TOK_KW_IDENT

    '='          shift, and go to state 67
    '<'          shift, and go to state 68
    '>'          shift, and go to state 69
    TOK_LESSEQU  shift, and go to state 70
    TOK_GREAEQU  shift, and go to state 71
    TOK_NEQUAL   shift, and go to state 72
    TOK_EQUALS   shift, and go to state 73
    '+'          shift, and go to state 74
    '-'          shift, and go to state 75
    '*'          shift, and go to state 76
    '/'          shift, and go to state 77
    '%'          shift, and go to state 78
    '['          shift, and go to state 79
    '.'          shift, and go to state 80

    $default  reduce using rule 45 (expr)


state 101

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_EQUALS expr
   47     | expr . TOK_NEQUAL expr
   48     | expr . '<' expr
   48     | expr '<' expr .
   49     | expr . TOK_GREAEQU expr
   50     | expr . '>' expr
   51     | expr . TOK_LESSEQU expr
   70 variable: expr . '[' expr ']'
   71         | expr . '.' TOK_KW_IDENT

    '+'  shift, and go to state 74
    '-'  shift, and go to state 75
    '*'  shift, and go to state 76
    '/'  shift, and go to state 77
    '%'  shift, and go to state 78
    '['  shift, and go to state 79
    '.'  shift, and go to state 80

    $default  reduce using rule 48 (expr)


state 102

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_EQUALS expr
   47     | expr . TOK_NEQUAL expr
   48     | expr . '<' expr
   49     | expr . TOK_GREAEQU expr
   50     | expr . '>' expr
   50     | expr '>' expr .
   51     | expr . TOK_LESSEQU expr
   70 variable: expr . '[' expr ']'
   71         | expr . '.' TOK_KW_IDENT

    '+'  shift, and go to state 74
    '-'  shift, and go to state 75
    '*'  shift, and go to state 76
    '/'  shift, and go to state 77
    '%'  shift, and go to state 78
    '['  shift, and go to state 79
    '.'  shift, and go to state 80

    $default  reduce using rule 50 (expr)


state 103

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_EQUALS expr
   47     | expr . TOK_NEQUAL expr
   48     | expr . '<' expr
   49     | expr . TOK_GREAEQU expr
   50     | expr . '>' expr
   51     | expr . TOK_LESSEQU expr
   51     | expr TOK_LESSEQU expr .
   70 variable: expr . '[' expr ']'
   71         | expr . '.' TOK_KW_IDENT

    '+'  shift, and go to state 74
    '-'  shift, and go to state 75
    '*'  shift, and go to state 76
    '/'  shift, and go to state 77
    '%'  shift, and go to state 78
    '['  shift, and go to state 79
    '.'  shift, and go to state 80

    $default  reduce using rule 51 (expr)


state 104

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_EQUALS expr
   47     | expr . TOK_NEQUAL expr
   48     | expr . '<' expr
   49     | expr . TOK_GREAEQU expr
   49     | expr TOK_GREAEQU expr .
   50     | expr . '>' expr
   51     | expr . TOK_LESSEQU expr
   70 variable: expr . '[' expr ']'
   71         | expr . '.' TOK_KW_IDENT

    '+'  shift, and go to state 74
    '-'  shift, and go to state 75
    '*'  shift, and go to state 76
    '/'  shift, and go to state 77
    '%'  shift, and go to state 78
    '['  shift, and go to state 79
    '.'  shift, and go to state 80

    $default  reduce using rule 49 (expr)


state 105

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_EQUALS expr
   47     | expr . TOK_NEQUAL expr
   47     | expr TOK_NEQUAL expr .
   48     | expr . '<' expr
   49     | expr . TOK_GREAEQU expr
   50     | expr . '>' expr
   51     | expr . TOK_LESSEQU expr
   70 variable: expr . '[' expr ']'
   71         | expr . '.' TOK_KW_IDENT

    '+'  shift, and go to state 74
    '-'  shift, and go to state 75
    '*'  shift, and go to state 76
    '/'  shift, and go to state 77
    '%'  shift, and go to state 78
    '['  shift, and go to state 79
    '.'  shift, and go to state 80

    $default  reduce using rule 47 (expr)


state 106

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_EQUALS expr
   46     | expr TOK_EQUALS expr .
   47     | expr . TOK_NEQUAL expr
   48     | expr . '<' expr
   49     | expr . TOK_GREAEQU expr
   50     | expr . '>' expr
   51     | expr . TOK_LESSEQU expr
   70 variable: expr . '[' expr ']'
   71         | expr . '.' TOK_KW_IDENT

    '+'  shift, and go to state 74
    '-'  shift, and go to state 75
    '*'  shift, and go to state 76
    '/'  shift, and go to state 77
    '%'  shift, and go to state 78
    '['  shift, and go to state 79
    '.'  shift, and go to state 80

    $default  reduce using rule 46 (expr)


state 107

   40 expr: expr . '+' expr
   40     | expr '+' expr .
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_EQUALS expr
   47     | expr . TOK_NEQUAL expr
   48     | expr . '<' expr
   49     | expr . TOK_GREAEQU expr
   50     | expr . '>' expr
   51     | expr . TOK_LESSEQU expr
   70 variable: expr . '[' expr ']'
   71         | expr . '.' TOK_KW_IDENT

    '*'  shift, and go to state 76
    '/'  shift, and go to state 77
    '%'  shift, and go to state 78
    '['  shift, and go to state 79
    '.'  shift, and go to state 80

    $default  reduce using rule 40 (expr)


state 108

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   41     | expr '-' expr .
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_EQUALS expr
   47     | expr . TOK_NEQUAL expr
   48     | expr . '<' expr
   49     | expr . TOK_GREAEQU expr
   50     | expr . '>' expr
   51     | expr . TOK_LESSEQU expr
   70 variable: expr . '[' expr ']'
   71         | expr . '.' TOK_KW_IDENT

    '*'  shift, and go to state 76
    '/'  shift, and go to state 77
    '%'  shift, and go to state 78
    '['  shift, and go to state 79
    '.'  shift, and go to state 80

    $default  reduce using rule 41 (expr)


state 109

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   42     | expr '*' expr .
   43     | expr . '/' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_EQUALS expr
   47     | expr . TOK_NEQUAL expr
   48     | expr . '<' expr
   49     | expr . TOK_GREAEQU expr
   50     | expr . '>' expr
   51     | expr . TOK_LESSEQU expr
   70 variable: expr . '[' expr ']'
   71         | expr . '.' TOK_KW_IDENT

    '['  shift, and go to state 79
    '.'  shift, and go to state 80

    $default  reduce using rule 42 (expr)


state 110

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   43     | expr '/' expr .
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_EQUALS expr
   47     | expr . TOK_NEQUAL expr
   48     | expr . '<' expr
   49     | expr . TOK_GREAEQU expr
   50     | expr . '>' expr
   51     | expr . TOK_LESSEQU expr
   70 variable: expr . '[' expr ']'
   71         | expr . '.' TOK_KW_IDENT

    '['  shift, and go to state 79
    '.'  shift, and go to state 80

    $default  reduce using rule 43 (expr)


state 111

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '%' expr
   44     | expr '%' expr .
   45     | expr . '=' expr
   46     | expr . TOK_EQUALS expr
   47     | expr . TOK_NEQUAL expr
   48     | expr . '<' expr
   49     | expr . TOK_GREAEQU expr
   50     | expr . '>' expr
   51     | expr . TOK_LESSEQU expr
   70 variable: expr . '[' expr ']'
   71         | expr . '.' TOK_KW_IDENT

    '['  shift, and go to state 79
    '.'  shift, and go to state 80

    $default  reduce using rule 44 (expr)


state 112

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_EQUALS expr
   47     | expr . TOK_NEQUAL expr
   48     | expr . '<' expr
   49     | expr . TOK_GREAEQU expr
   50     | expr . '>' expr
   51     | expr . TOK_LESSEQU expr
   70 variable: expr . '[' expr ']'
   70         | expr '[' expr . ']'
   71         | expr . '.' TOK_KW_IDENT

    ']'          shift, and go to state 125
    '='          shift, and go to state 67
    '<'          shift, and go to state 68
    '>'          shift, and go to state 69
    TOK_LESSEQU  shift, and go to state 70
    TOK_GREAEQU  shift, and go to state 71
    TOK_NEQUAL   shift, and go to state 72
    TOK_EQUALS   shift, and go to state 73
    '+'          shift, and go to state 74
    '-'          shift, and go to state 75
    '*'          shift, and go to state 76
    '/'          shift, and go to state 77
    '%'          shift, and go to state 78
    '['          shift, and go to state 79
    '.'          shift, and go to state 80


state 113

   71 variable: expr '.' TOK_KW_IDENT .

    $default  reduce using rule 71 (variable)


state 114

   65 args: args ',' . expr

    TOK_KW_IDENT    shift, and go to state 46
    TOK_KW_FALSE    shift, and go to state 12
    TOK_KW_TRUE     shift, and go to state 13
    TOK_KW_NEW      shift, and go to state 14
    TOK_KW_NULL     shift, and go to state 16
    TOK_LIT_INT     shift, and go to state 17
    TOK_LIT_CHAR    shift, and go to state 18
    TOK_LIT_STRING  shift, and go to state 19
    '('             shift, and go to state 22
    '+'             shift, and go to state 24
    '-'             shift, and go to state 25
    '!'             shift, and go to state 26
    TOK_KW_CHR      shift, and go to state 27
    TOK_KW_ORD      shift, and go to state 28

    expr       go to state 126
    allocator  go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


state 115

   68 call: TOK_KW_IDENT '(' args ')' .

    $default  reduce using rule 68 (call)


state 116

   35 while: TOK_KW_WHILE '(' expr ')' . statement

    TOK_KW_IDENT    shift, and go to state 4
    TOK_KW_VOID     shift, and go to state 5
    TOK_KW_BOOL     shift, and go to state 6
    TOK_KW_CHAR     shift, and go to state 7
    TOK_KW_INT      shift, and go to state 8
    TOK_KW_STRING   shift, and go to state 9
    TOK_KW_WHILE    shift, and go to state 10
    TOK_KW_RETURN   shift, and go to state 11
    TOK_KW_FALSE    shift, and go to state 12
    TOK_KW_TRUE     shift, and go to state 13
    TOK_KW_NEW      shift, and go to state 14
    TOK_KW_NULL     shift, and go to state 16
    TOK_LIT_INT     shift, and go to state 17
    TOK_LIT_CHAR    shift, and go to state 18
    TOK_LIT_STRING  shift, and go to state 19
    ';'             shift, and go to state 20
    '{'             shift, and go to state 21
    '('             shift, and go to state 22
    TOK_KW_IF       shift, and go to state 23
    '+'             shift, and go to state 24
    '-'             shift, and go to state 25
    '!'             shift, and go to state 26
    TOK_KW_CHR      shift, and go to state 27
    TOK_KW_ORD      shift, and go to state 28

    basetype   go to state 30
    identdecl  go to state 90
    block      go to state 33
    statement  go to state 127
    vardecl    go to state 35
    while      go to state 36
    ifelse     go to state 37
    return     go to state 38
    expr       go to state 39
    allocator  go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


state 117

   62 allocator: TOK_KW_NEW TOK_KW_IDENT '(' ')' .

    $default  reduce using rule 62 (allocator)


state 118

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_EQUALS expr
   47     | expr . TOK_NEQUAL expr
   48     | expr . '<' expr
   49     | expr . TOK_GREAEQU expr
   50     | expr . '>' expr
   51     | expr . TOK_LESSEQU expr
   63 allocator: TOK_KW_NEW TOK_KW_STRING '(' expr . ')'
   70 variable: expr . '[' expr ']'
   71         | expr . '.' TOK_KW_IDENT

    ')'          shift, and go to state 128
    '='          shift, and go to state 67
    '<'          shift, and go to state 68
    '>'          shift, and go to state 69
    TOK_LESSEQU  shift, and go to state 70
    TOK_GREAEQU  shift, and go to state 71
    TOK_NEQUAL   shift, and go to state 72
    TOK_EQUALS   shift, and go to state 73
    '+'          shift, and go to state 74
    '-'          shift, and go to state 75
    '*'          shift, and go to state 76
    '/'          shift, and go to state 77
    '%'          shift, and go to state 78
    '['          shift, and go to state 79
    '.'          shift, and go to state 80


state 119

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_EQUALS expr
   47     | expr . TOK_NEQUAL expr
   48     | expr . '<' expr
   49     | expr . TOK_GREAEQU expr
   50     | expr . '>' expr
   51     | expr . TOK_LESSEQU expr
   64 allocator: TOK_KW_NEW basetype '[' expr . ']'
   70 variable: expr . '[' expr ']'
   71         | expr . '.' TOK_KW_IDENT

    ']'          shift, and go to state 129
    '='          shift, and go to state 67
    '<'          shift, and go to state 68
    '>'          shift, and go to state 69
    TOK_LESSEQU  shift, and go to state 70
    TOK_GREAEQU  shift, and go to state 71
    TOK_NEQUAL   shift, and go to state 72
    TOK_EQUALS   shift, and go to state 73
    '+'          shift, and go to state 74
    '-'          shift, and go to state 75
    '*'          shift, and go to state 76
    '/'          shift, and go to state 77
    '%'          shift, and go to state 78
    '['          shift, and go to state 79
    '.'          shift, and go to state 80


state 120

    6 structdef: TOK_KW_STRUCT TOK_KW_IDENT '{' mfielddecl . '}'
    7 mfielddecl: mfielddecl . fielddecl ';'

    TOK_KW_IDENT   shift, and go to state 95
    TOK_KW_VOID    shift, and go to state 5
    TOK_KW_BOOL    shift, and go to state 6
    TOK_KW_CHAR    shift, and go to state 7
    TOK_KW_INT     shift, and go to state 8
    TOK_KW_STRING  shift, and go to state 9
    '}'            shift, and go to state 130

    fielddecl  go to state 131
    basetype   go to state 132


state 121

   36 ifelse: TOK_KW_IF '(' expr ')' . statement
   37       | TOK_KW_IF '(' expr ')' . statement TOK_KW_ELSE statement

    TOK_KW_IDENT    shift, and go to state 4
    TOK_KW_VOID     shift, and go to state 5
    TOK_KW_BOOL     shift, and go to state 6
    TOK_KW_CHAR     shift, and go to state 7
    TOK_KW_INT      shift, and go to state 8
    TOK_KW_STRING   shift, and go to state 9
    TOK_KW_WHILE    shift, and go to state 10
    TOK_KW_RETURN   shift, and go to state 11
    TOK_KW_FALSE    shift, and go to state 12
    TOK_KW_TRUE     shift, and go to state 13
    TOK_KW_NEW      shift, and go to state 14
    TOK_KW_NULL     shift, and go to state 16
    TOK_LIT_INT     shift, and go to state 17
    TOK_LIT_CHAR    shift, and go to state 18
    TOK_LIT_STRING  shift, and go to state 19
    ';'             shift, and go to state 20
    '{'             shift, and go to state 21
    '('             shift, and go to state 22
    TOK_KW_IF       shift, and go to state 23
    '+'             shift, and go to state 24
    '-'             shift, and go to state 25
    '!'             shift, and go to state 26
    TOK_KW_CHR      shift, and go to state 27
    TOK_KW_ORD      shift, and go to state 28

    basetype   go to state 30
    identdecl  go to state 90
    block      go to state 33
    statement  go to state 133
    vardecl    go to state 35
    while      go to state 36
    ifelse     go to state 37
    return     go to state 38
    expr       go to state 39
    allocator  go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


state 122

   17 funcargs: funcargs ',' . identdecl

    TOK_KW_IDENT   shift, and go to state 95
    TOK_KW_VOID    shift, and go to state 5
    TOK_KW_BOOL    shift, and go to state 6
    TOK_KW_CHAR    shift, and go to state 7
    TOK_KW_INT     shift, and go to state 8
    TOK_KW_STRING  shift, and go to state 9

    basetype   go to state 30
    identdecl  go to state 134


state 123

   20 param: '(' funcargs ')' .

    $default  reduce using rule 20 (param)


state 124

   34 vardecl: identdecl '=' expr ';' .

    $default  reduce using rule 34 (vardecl)


state 125

   70 variable: expr '[' expr ']' .

    $default  reduce using rule 70 (variable)


state 126

   40 expr: expr . '+' expr
   41     | expr . '-' expr
   42     | expr . '*' expr
   43     | expr . '/' expr
   44     | expr . '%' expr
   45     | expr . '=' expr
   46     | expr . TOK_EQUALS expr
   47     | expr . TOK_NEQUAL expr
   48     | expr . '<' expr
   49     | expr . TOK_GREAEQU expr
   50     | expr . '>' expr
   51     | expr . TOK_LESSEQU expr
   65 args: args ',' expr .
   70 variable: expr . '[' expr ']'
   71         | expr . '.' TOK_KW_IDENT

    '='          shift, and go to state 67
    '<'          shift, and go to state 68
    '>'          shift, and go to state 69
    TOK_LESSEQU  shift, and go to state 70
    TOK_GREAEQU  shift, and go to state 71
    TOK_NEQUAL   shift, and go to state 72
    TOK_EQUALS   shift, and go to state 73
    '+'          shift, and go to state 74
    '-'          shift, and go to state 75
    '*'          shift, and go to state 76
    '/'          shift, and go to state 77
    '%'          shift, and go to state 78
    '['          shift, and go to state 79
    '.'          shift, and go to state 80

    $default  reduce using rule 65 (args)


state 127

   35 while: TOK_KW_WHILE '(' expr ')' statement .

    $default  reduce using rule 35 (while)


state 128

   63 allocator: TOK_KW_NEW TOK_KW_STRING '(' expr ')' .

    $default  reduce using rule 63 (allocator)


state 129

   64 allocator: TOK_KW_NEW basetype '[' expr ']' .

    $default  reduce using rule 64 (allocator)


state 130

    6 structdef: TOK_KW_STRUCT TOK_KW_IDENT '{' mfielddecl '}' .

    $default  reduce using rule 6 (structdef)


state 131

    7 mfielddecl: mfielddecl fielddecl . ';'

    ';'  shift, and go to state 135


state 132

    9 fielddecl: basetype . TOK_KW_IDENT
   10          | basetype . TOK_sNEWARRAY TOK_KW_IDENT

    TOK_KW_IDENT   shift, and go to state 136
    TOK_sNEWARRAY  shift, and go to state 137


state 133

   36 ifelse: TOK_KW_IF '(' expr ')' statement .
   37       | TOK_KW_IF '(' expr ')' statement . TOK_KW_ELSE statement

    TOK_KW_ELSE  shift, and go to state 138

    $default  reduce using rule 36 (ifelse)


state 134

   17 funcargs: funcargs ',' identdecl .

    $default  reduce using rule 17 (funcargs)


state 135

    7 mfielddecl: mfielddecl fielddecl ';' .

    $default  reduce using rule 7 (mfielddecl)


state 136

    9 fielddecl: basetype TOK_KW_IDENT .

    $default  reduce using rule 9 (fielddecl)


state 137

   10 fielddecl: basetype TOK_sNEWARRAY . TOK_KW_IDENT

    TOK_KW_IDENT  shift, and go to state 139


state 138

   37 ifelse: TOK_KW_IF '(' expr ')' statement TOK_KW_ELSE . statement

    TOK_KW_IDENT    shift, and go to state 4
    TOK_KW_VOID     shift, and go to state 5
    TOK_KW_BOOL     shift, and go to state 6
    TOK_KW_CHAR     shift, and go to state 7
    TOK_KW_INT      shift, and go to state 8
    TOK_KW_STRING   shift, and go to state 9
    TOK_KW_WHILE    shift, and go to state 10
    TOK_KW_RETURN   shift, and go to state 11
    TOK_KW_FALSE    shift, and go to state 12
    TOK_KW_TRUE     shift, and go to state 13
    TOK_KW_NEW      shift, and go to state 14
    TOK_KW_NULL     shift, and go to state 16
    TOK_LIT_INT     shift, and go to state 17
    TOK_LIT_CHAR    shift, and go to state 18
    TOK_LIT_STRING  shift, and go to state 19
    ';'             shift, and go to state 20
    '{'             shift, and go to state 21
    '('             shift, and go to state 22
    TOK_KW_IF       shift, and go to state 23
    '+'             shift, and go to state 24
    '-'             shift, and go to state 25
    '!'             shift, and go to state 26
    TOK_KW_CHR      shift, and go to state 27
    TOK_KW_ORD      shift, and go to state 28

    basetype   go to state 30
    identdecl  go to state 90
    block      go to state 33
    statement  go to state 140
    vardecl    go to state 35
    while      go to state 36
    ifelse     go to state 37
    return     go to state 38
    expr       go to state 39
    allocator  go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


state 139

   10 fielddecl: basetype TOK_sNEWARRAY TOK_KW_IDENT .

    $default  reduce using rule 10 (fielddecl)


state 140

   37 ifelse: TOK_KW_IF '(' expr ')' statement TOK_KW_ELSE statement .

    $default  reduce using rule 37 (ifelse)
