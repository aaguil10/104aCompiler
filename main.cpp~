// $Id: main.cpp,v 1.1 2014-10-03 18:45:23-07 - - $
#include <iostream>
#include <fstream>
#include <string>
using namespace std;

#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include <string>
#include "stringset.h"
#include "auxlib.h"
#include "astree.h"
#include "lyutils.h"
#include "symboltable.h"

//extern symbol_table typenames_table;

bool debug = false;
void  db(string m){ if(debug){ cerr << m << endl;} };
const string CPP = "/usr/bin/cpp";
const string cpp_name = "/usr/bin/cpp";
string yyin_cpp_command;
extern FILE* yyin;
FILE* tok_file;
FILE* sym_file;
   //symbol_table ident_table;
   //symbol_table typenames_table;

vector<symbol_table*> symbol_stack;
//extern int next_block;

bool want_echo () {
   return not (isatty (fileno (stdin)) and isatty (fileno (stdout)));
}

void yyin_cpp_popen (const char* filename) {
   yyin_cpp_command = cpp_name;
   yyin_cpp_command += " ";
   yyin_cpp_command += filename;
   yyin = popen (yyin_cpp_command.c_str(), "r");
   if (yyin == NULL) {
      syserrprintf (yyin_cpp_command.c_str());
      exit (get_exitstatus());
   }
}

void yyin_cpp_pclose (void) {
   int pclose_rc = pclose (yyin);
   eprint_status (yyin_cpp_command.c_str(), pclose_rc);
   if (pclose_rc != 0) set_exitstatus (EXIT_FAILURE);
}

FILE* make_str_file(char* filename){
   int len = strlen(filename);
   char* file_str = (char*)malloc(len + 2); 
   strcpy(file_str, filename);
   file_str[len-2] = 's';
   file_str[len-1] = 't';
   file_str[len] = 'r';
   file_str[len+1] = '\0';
   FILE* str_name = fopen(file_str, "w+");
   free(file_str);
   return str_name;
}

FILE* make_tok_file(char* filename, int first){
   int len = strlen(filename);
   char* file_str = (char*)malloc(len + 2); 
   strcpy(file_str, filename);
   file_str[len-2] = 't';
   file_str[len-1] = 'o';
   file_str[len] = 'k';
   file_str[len+1] = '\0';
   FILE* str_name;
   if(first == 1){
      str_name = fopen(file_str, "w+");
   }else{
      str_name = fopen(file_str, "a+");
   }
   free(file_str);
   return str_name;
}

FILE* make_ast_file(char* filename){
   int len = strlen(filename);
   char* file_str = (char*)malloc(len + 2);
   strcpy(file_str, filename);
   file_str[len-2] = 'a';
   file_str[len-1] = 's';
   file_str[len] = 't';
   file_str[len+1] = '\0';
   FILE* str_name = fopen(file_str, "w+");
   free(file_str);
   return str_name;
}

FILE* make_sym_file(char* filename){
   int len = strlen(filename);
   char* file_str = (char*)malloc(len + 2);
   strcpy(file_str, filename);
   file_str[len-2] = 's';
   file_str[len-1] = 'y';
   file_str[len] = 'm';
   file_str[len+1] = '\0';
   FILE* str_name = fopen(file_str, "w+");
   free(file_str);
   return str_name;
}

void print_str(char* filename){
   yyin_cpp_pclose();
   FILE* str_name = make_str_file(filename);
   dump_stringset (str_name);
}

int main (int argc, char **argv) {
   int c;
   char* filename = argv[argc - 1];
   tok_file = make_tok_file(filename, 1);
   sym_file = make_sym_file(filename);
   //int next_block = 1;
   yy_flex_debug = 0;
   yydebug = 0;

   //symbol_table ident_table;
   //symbol_table typenames_table;

   while ((c = getopt (argc, argv, "ly@:D:")) != -1){
      switch (c){
         case 'l':
            db( "Set 'l' flag!");
            yy_flex_debug = 1;
            continue;
         case 'y':
            db("Set 'y' flag!");
            yydebug = 1;
            continue;
         case '@':
            db("Set @ flag!");
            set_debugflags (optarg);
            debug = true;
            continue;
         case 'D':
            db("Set '-D' flag!");
            continue;
      }
   }
   int parsecode = 0;
   set_execname (argv[0]);
   yyin_cpp_popen (filename);
   parsecode = yyparse();
   if (parsecode) {
      errprintf ("%:parse failed (%d)\n", parsecode);
   }else {
      DEBUGSTMT ('a', dump_astree (stderr, yyparse_astree); );
   }

   DEBUGSTMT ('s', dump_stringset (stderr); );
   yylex_destroy();
 
   FILE* str_name = make_str_file(filename);
   dump_stringset (str_name);

   traverseAST(yyparse_astree,0);

   FILE* ast_name = make_ast_file(filename);
   dump_astree (ast_name, yyparse_astree);
   string s = "typenames_table";


  symbol_table global;
  //string* keyA = new string("Key A");
  //symbol* a = new_symbol(0,0,0,NULL,NULL);
  //ident_table[keyA] = a;
   print_table(s, typenames_table);
std::cout << "mymap.size() is " << ident_table.size() << std::endl;
   free_ast (yyparse_astree);

   return get_exitstatus();
}


