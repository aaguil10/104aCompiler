Terminals unused in grammar

   TOK_ROOT
   NOTIDENT
   NOTCHAR
   TOK_NEWSTRING
   TOK_DECLID
   TOK_CALL
   TOK_STRINGCON
   TOK_CHARCON
   TOK_INTCON
   '^'
   TOK_PARAMLIST
   TOK_BLOCK
   TOK_VARDECL
   TOK_IFELSE
   TOK_NEG
   TOK_POS


Rules useless in parser due to conflicts

   55 UNOP: '('


State 23 conflicts: 8 shift/reduce
State 62 conflicts: 14 shift/reduce
State 99 conflicts: 14 shift/reduce


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program structdef
    3        | program function
    4        | program statement
    5        | /* empty */

    6 structdef: TOK_KW_STRUCT TOK_KW_IDENT '{' mfielddecl '}'

    7 mfielddecl: mfielddecl fielddecl ';'
    8           | /* empty */

    9 fielddecl: basetype TOK_KW_IDENT
   10          | basetype TOK_NEWARRAY TOK_FIELD

   11 basetype: TOK_KW_VOID
   12         | TOK_KW_BOOL
   13         | TOK_KW_INT
   14         | TOK_KW_CHAR
   15         | TOK_KW_STRING
   16         | TOK_TYPEID

   17 funcargs: funcargs ',' identdecl
   18         | identdecl
   19         | /* empty */

   20 param: '(' funcargs ')'

   21 function: identdecl param block

   22 identdecl: basetype TOK_KW_IDENT
   23          | basetype TOK_NEWARRAY TOK_KW_IDENT

   24 blokargs: blokargs statement
   25         | /* empty */

   26 block: '{' blokargs '}'
   27      | ';'

   28 statement: block
   29          | vardecl
   30          | while
   31          | ifelse
   32          | return
   33          | expr ';'

   34 vardecl: identdecl '=' expr ';'

   35 while: TOK_KW_WHILE '(' expr ')' statement

   36 ifelse: TOK_KW_IF '(' expr ')' statement
   37       | TOK_KW_IF '(' expr ')' statement TOK_KW_ELSE statement

   38 return: TOK_KW_RETURN ';'
   39       | TOK_KW_RETURN expr ';'

   40 BINOP: '+'
   41      | '-'
   42      | '*'
   43      | '/'
   44      | '%'
   45      | '='
   46      | TOK_EQUALS
   47      | TOK_NEQUAL
   48      | '<'
   49      | TOK_GREAEQU
   50      | '>'
   51      | TOK_LESSEQU

   52 UNOP: '+'
   53     | '-'
   54     | '!'
   55     | '('
   56     | TOK_KW_ORD
   57     | TOK_KW_CHR

   58 expr: expr BINOP expr
   59     | UNOP expr
   60     | allocator
   61     | call
   62     | '(' expr ')'
   63     | variable
   64     | constant

   65 allocator: TOK_KW_NEW TOK_KW_IDENT '(' ')'
   66          | TOK_KW_NEW TOK_KW_STRING '(' expr ')'
   67          | TOK_KW_NEW basetype '[' expr ']'

   68 args: args ',' expr
   69     | expr
   70     | /* empty */

   71 call: TOK_KW_IDENT '(' args ')'

   72 variable: TOK_KW_IDENT
   73         | expr '[' expr ']'
   74         | expr '.' TOK_KW_IDENT

   75 constant: TOK_LIT_INT
   76         | TOK_LIT_CHAR
   77         | TOK_LIT_STRING
   78         | TOK_KW_FALSE
   79         | TOK_KW_TRUE
   80         | TOK_KW_NULL


Terminals, with rules where they appear

$end (0) 0
'!' (33) 54
'%' (37) 44
'(' (40) 20 35 36 37 55 62 65 66 71
')' (41) 20 35 36 37 62 65 66 71
'*' (42) 42
'+' (43) 40 52
',' (44) 17 68
'-' (45) 41 53
'.' (46) 74
'/' (47) 43
';' (59) 7 27 33 34 38 39
'<' (60) 48
'=' (61) 34 45
'>' (62) 50
'[' (91) 67 73
']' (93) 67 73
'^' (94)
'{' (123) 6 26
'}' (125) 6 26
error (256)
TOK_ROOT (258)
TOK_KW_IDENT (259) 6 9 22 23 65 71 72 74
NOTIDENT (260)
NOTCHAR (261)
TOK_KW_VOID (262) 11
TOK_KW_BOOL (263) 12
TOK_KW_CHAR (264) 14
TOK_KW_INT (265) 13
TOK_KW_STRING (266) 15 66
TOK_KW_WHILE (267) 35
TOK_KW_RETURN (268) 38 39
TOK_KW_FALSE (269) 78
TOK_KW_TRUE (270) 79
TOK_KW_NEW (271) 65 66 67
TOK_KW_STRUCT (272) 6
TOK_NEWSTRING (273)
TOK_NEWARRAY (274) 10 23
TOK_KW_NULL (275) 80
TOK_LIT_INT (276) 75
TOK_LIT_CHAR (277) 76
TOK_LIT_STRING (278) 77
TOK_FIELD (279) 10
TOK_DECLID (280)
TOK_TYPEID (281) 16
TOK_CALL (282)
TOK_STRINGCON (283)
TOK_CHARCON (284)
TOK_INTCON (285)
TOK_KW_ELSE (286) 37
TOK_KW_IF (287) 36 37
TOK_PARAMLIST (288)
TOK_BLOCK (289)
TOK_VARDECL (290)
TOK_IFELSE (291)
TOK_LESSEQU (292) 51
TOK_GREAEQU (293) 49
TOK_NEQUAL (294) 47
TOK_EQUALS (295) 46
TOK_KW_CHR (296) 57
TOK_KW_ORD (297) 56
TOK_NEG (298)
TOK_POS (299)


Nonterminals, with rules where they appear

$accept (64)
    on left: 0
start (65)
    on left: 1, on right: 0
program (66)
    on left: 2 3 4 5, on right: 1 2 3 4
structdef (67)
    on left: 6, on right: 2
mfielddecl (68)
    on left: 7 8, on right: 6 7
fielddecl (69)
    on left: 9 10, on right: 7
basetype (70)
    on left: 11 12 13 14 15 16, on right: 9 10 22 23 67
funcargs (71)
    on left: 17 18 19, on right: 17 20
param (72)
    on left: 20, on right: 21
function (73)
    on left: 21, on right: 3
identdecl (74)
    on left: 22 23, on right: 17 18 21 34
blokargs (75)
    on left: 24 25, on right: 24 26
block (76)
    on left: 26 27, on right: 21 28
statement (77)
    on left: 28 29 30 31 32 33, on right: 4 24 35 36 37
vardecl (78)
    on left: 34, on right: 29
while (79)
    on left: 35, on right: 30
ifelse (80)
    on left: 36 37, on right: 31
return (81)
    on left: 38 39, on right: 32
BINOP (82)
    on left: 40 41 42 43 44 45 46 47 48 49 50 51, on right: 58
UNOP (83)
    on left: 52 53 54 55 56 57, on right: 59
expr (84)
    on left: 58 59 60 61 62 63 64, on right: 33 34 35 36 37 39 58 59
    62 66 67 68 69 73 74
allocator (85)
    on left: 65 66 67, on right: 60
args (86)
    on left: 68 69 70, on right: 68 71
call (87)
    on left: 71, on right: 61
variable (88)
    on left: 72 73 74, on right: 63
constant (89)
    on left: 75 76 77 78 79 80, on right: 64


state 0

    0 $accept: . start $end

    $default  reduce using rule 5 (program)

    start    go to state 1
    program  go to state 2


state 1

    0 $accept: start . $end

    $end  shift, and go to state 3


state 2

    1 start: program .
    2 program: program . structdef
    3        | program . function
    4        | program . statement

    TOK_KW_IDENT    shift, and go to state 4
    TOK_KW_VOID     shift, and go to state 5
    TOK_KW_BOOL     shift, and go to state 6
    TOK_KW_CHAR     shift, and go to state 7
    TOK_KW_INT      shift, and go to state 8
    TOK_KW_STRING   shift, and go to state 9
    TOK_KW_WHILE    shift, and go to state 10
    TOK_KW_RETURN   shift, and go to state 11
    TOK_KW_FALSE    shift, and go to state 12
    TOK_KW_TRUE     shift, and go to state 13
    TOK_KW_NEW      shift, and go to state 14
    TOK_KW_STRUCT   shift, and go to state 15
    TOK_KW_NULL     shift, and go to state 16
    TOK_LIT_INT     shift, and go to state 17
    TOK_LIT_CHAR    shift, and go to state 18
    TOK_LIT_STRING  shift, and go to state 19
    TOK_TYPEID      shift, and go to state 20
    ';'             shift, and go to state 21
    '{'             shift, and go to state 22
    '('             shift, and go to state 23
    TOK_KW_IF       shift, and go to state 24
    '+'             shift, and go to state 25
    '-'             shift, and go to state 26
    '!'             shift, and go to state 27
    TOK_KW_CHR      shift, and go to state 28
    TOK_KW_ORD      shift, and go to state 29

    $default  reduce using rule 1 (start)

    structdef  go to state 30
    basetype   go to state 31
    function   go to state 32
    identdecl  go to state 33
    block      go to state 34
    statement  go to state 35
    vardecl    go to state 36
    while      go to state 37
    ifelse     go to state 38
    return     go to state 39
    UNOP       go to state 40
    expr       go to state 41
    allocator  go to state 42
    call       go to state 43
    variable   go to state 44
    constant   go to state 45


state 3

    0 $accept: start $end .

    $default  accept


state 4

   71 call: TOK_KW_IDENT . '(' args ')'
   72 variable: TOK_KW_IDENT .

    '('  shift, and go to state 46

    $default  reduce using rule 72 (variable)


state 5

   11 basetype: TOK_KW_VOID .

    $default  reduce using rule 11 (basetype)


state 6

   12 basetype: TOK_KW_BOOL .

    $default  reduce using rule 12 (basetype)


state 7

   14 basetype: TOK_KW_CHAR .

    $default  reduce using rule 14 (basetype)


state 8

   13 basetype: TOK_KW_INT .

    $default  reduce using rule 13 (basetype)


state 9

   15 basetype: TOK_KW_STRING .

    $default  reduce using rule 15 (basetype)


state 10

   35 while: TOK_KW_WHILE . '(' expr ')' statement

    '('  shift, and go to state 47


state 11

   38 return: TOK_KW_RETURN . ';'
   39       | TOK_KW_RETURN . expr ';'

    TOK_KW_IDENT    shift, and go to state 4
    TOK_KW_FALSE    shift, and go to state 12
    TOK_KW_TRUE     shift, and go to state 13
    TOK_KW_NEW      shift, and go to state 14
    TOK_KW_NULL     shift, and go to state 16
    TOK_LIT_INT     shift, and go to state 17
    TOK_LIT_CHAR    shift, and go to state 18
    TOK_LIT_STRING  shift, and go to state 19
    ';'             shift, and go to state 48
    '('             shift, and go to state 23
    '+'             shift, and go to state 25
    '-'             shift, and go to state 26
    '!'             shift, and go to state 27
    TOK_KW_CHR      shift, and go to state 28
    TOK_KW_ORD      shift, and go to state 29

    UNOP       go to state 40
    expr       go to state 49
    allocator  go to state 42
    call       go to state 43
    variable   go to state 44
    constant   go to state 45


state 12

   78 constant: TOK_KW_FALSE .

    $default  reduce using rule 78 (constant)


state 13

   79 constant: TOK_KW_TRUE .

    $default  reduce using rule 79 (constant)


state 14

   65 allocator: TOK_KW_NEW . TOK_KW_IDENT '(' ')'
   66          | TOK_KW_NEW . TOK_KW_STRING '(' expr ')'
   67          | TOK_KW_NEW . basetype '[' expr ']'

    TOK_KW_IDENT   shift, and go to state 50
    TOK_KW_VOID    shift, and go to state 5
    TOK_KW_BOOL    shift, and go to state 6
    TOK_KW_CHAR    shift, and go to state 7
    TOK_KW_INT     shift, and go to state 8
    TOK_KW_STRING  shift, and go to state 51
    TOK_TYPEID     shift, and go to state 20

    basetype  go to state 52


state 15

    6 structdef: TOK_KW_STRUCT . TOK_KW_IDENT '{' mfielddecl '}'

    TOK_KW_IDENT  shift, and go to state 53


state 16

   80 constant: TOK_KW_NULL .

    $default  reduce using rule 80 (constant)


state 17

   75 constant: TOK_LIT_INT .

    $default  reduce using rule 75 (constant)


state 18

   76 constant: TOK_LIT_CHAR .

    $default  reduce using rule 76 (constant)


state 19

   77 constant: TOK_LIT_STRING .

    $default  reduce using rule 77 (constant)


state 20

   16 basetype: TOK_TYPEID .

    $default  reduce using rule 16 (basetype)


state 21

   27 block: ';' .

    $default  reduce using rule 27 (block)


state 22

   26 block: '{' . blokargs '}'

    $default  reduce using rule 25 (blokargs)

    blokargs  go to state 54


state 23

   55 UNOP: '(' .
   62 expr: '(' . expr ')'

    TOK_KW_IDENT    shift, and go to state 4
    TOK_KW_FALSE    shift, and go to state 12
    TOK_KW_TRUE     shift, and go to state 13
    TOK_KW_NEW      shift, and go to state 14
    TOK_KW_NULL     shift, and go to state 16
    TOK_LIT_INT     shift, and go to state 17
    TOK_LIT_CHAR    shift, and go to state 18
    TOK_LIT_STRING  shift, and go to state 19
    '('             shift, and go to state 23
    '+'             shift, and go to state 25
    '-'             shift, and go to state 26
    '!'             shift, and go to state 27
    TOK_KW_CHR      shift, and go to state 28
    TOK_KW_ORD      shift, and go to state 29

    TOK_KW_IDENT    [reduce using rule 55 (UNOP)]
    TOK_KW_FALSE    [reduce using rule 55 (UNOP)]
    TOK_KW_TRUE     [reduce using rule 55 (UNOP)]
    TOK_KW_NEW      [reduce using rule 55 (UNOP)]
    TOK_KW_NULL     [reduce using rule 55 (UNOP)]
    TOK_LIT_INT     [reduce using rule 55 (UNOP)]
    TOK_LIT_CHAR    [reduce using rule 55 (UNOP)]
    TOK_LIT_STRING  [reduce using rule 55 (UNOP)]

    UNOP       go to state 40
    expr       go to state 55
    allocator  go to state 42
    call       go to state 43
    variable   go to state 44
    constant   go to state 45


state 24

   36 ifelse: TOK_KW_IF . '(' expr ')' statement
   37       | TOK_KW_IF . '(' expr ')' statement TOK_KW_ELSE statement

    '('  shift, and go to state 56


state 25

   52 UNOP: '+' .

    $default  reduce using rule 52 (UNOP)


state 26

   53 UNOP: '-' .

    $default  reduce using rule 53 (UNOP)


state 27

   54 UNOP: '!' .

    $default  reduce using rule 54 (UNOP)


state 28

   57 UNOP: TOK_KW_CHR .

    $default  reduce using rule 57 (UNOP)


state 29

   56 UNOP: TOK_KW_ORD .

    $default  reduce using rule 56 (UNOP)


state 30

    2 program: program structdef .

    $default  reduce using rule 2 (program)


state 31

   22 identdecl: basetype . TOK_KW_IDENT
   23          | basetype . TOK_NEWARRAY TOK_KW_IDENT

    TOK_KW_IDENT  shift, and go to state 57
    TOK_NEWARRAY  shift, and go to state 58


state 32

    3 program: program function .

    $default  reduce using rule 3 (program)


state 33

   21 function: identdecl . param block
   34 vardecl: identdecl . '=' expr ';'

    '('  shift, and go to state 59
    '='  shift, and go to state 60

    param  go to state 61


state 34

   28 statement: block .

    $default  reduce using rule 28 (statement)


state 35

    4 program: program statement .

    $default  reduce using rule 4 (program)


state 36

   29 statement: vardecl .

    $default  reduce using rule 29 (statement)


state 37

   30 statement: while .

    $default  reduce using rule 30 (statement)


state 38

   31 statement: ifelse .

    $default  reduce using rule 31 (statement)


state 39

   32 statement: return .

    $default  reduce using rule 32 (statement)


state 40

   59 expr: UNOP . expr

    TOK_KW_IDENT    shift, and go to state 4
    TOK_KW_FALSE    shift, and go to state 12
    TOK_KW_TRUE     shift, and go to state 13
    TOK_KW_NEW      shift, and go to state 14
    TOK_KW_NULL     shift, and go to state 16
    TOK_LIT_INT     shift, and go to state 17
    TOK_LIT_CHAR    shift, and go to state 18
    TOK_LIT_STRING  shift, and go to state 19
    '('             shift, and go to state 23
    '+'             shift, and go to state 25
    '-'             shift, and go to state 26
    '!'             shift, and go to state 27
    TOK_KW_CHR      shift, and go to state 28
    TOK_KW_ORD      shift, and go to state 29

    UNOP       go to state 40
    expr       go to state 62
    allocator  go to state 42
    call       go to state 43
    variable   go to state 44
    constant   go to state 45


state 41

   33 statement: expr . ';'
   58 expr: expr . BINOP expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_KW_IDENT

    ';'          shift, and go to state 63
    '='          shift, and go to state 64
    '<'          shift, and go to state 65
    '>'          shift, and go to state 66
    TOK_LESSEQU  shift, and go to state 67
    TOK_GREAEQU  shift, and go to state 68
    TOK_NEQUAL   shift, and go to state 69
    TOK_EQUALS   shift, and go to state 70
    '+'          shift, and go to state 71
    '-'          shift, and go to state 72
    '*'          shift, and go to state 73
    '/'          shift, and go to state 74
    '%'          shift, and go to state 75
    '['          shift, and go to state 76
    '.'          shift, and go to state 77

    BINOP  go to state 78


state 42

   60 expr: allocator .

    $default  reduce using rule 60 (expr)


state 43

   61 expr: call .

    $default  reduce using rule 61 (expr)


state 44

   63 expr: variable .

    $default  reduce using rule 63 (expr)


state 45

   64 expr: constant .

    $default  reduce using rule 64 (expr)


state 46

   71 call: TOK_KW_IDENT '(' . args ')'

    TOK_KW_IDENT    shift, and go to state 4
    TOK_KW_FALSE    shift, and go to state 12
    TOK_KW_TRUE     shift, and go to state 13
    TOK_KW_NEW      shift, and go to state 14
    TOK_KW_NULL     shift, and go to state 16
    TOK_LIT_INT     shift, and go to state 17
    TOK_LIT_CHAR    shift, and go to state 18
    TOK_LIT_STRING  shift, and go to state 19
    '('             shift, and go to state 23
    '+'             shift, and go to state 25
    '-'             shift, and go to state 26
    '!'             shift, and go to state 27
    TOK_KW_CHR      shift, and go to state 28
    TOK_KW_ORD      shift, and go to state 29

    $default  reduce using rule 70 (args)

    UNOP       go to state 40
    expr       go to state 79
    allocator  go to state 42
    args       go to state 80
    call       go to state 43
    variable   go to state 44
    constant   go to state 45


state 47

   35 while: TOK_KW_WHILE '(' . expr ')' statement

    TOK_KW_IDENT    shift, and go to state 4
    TOK_KW_FALSE    shift, and go to state 12
    TOK_KW_TRUE     shift, and go to state 13
    TOK_KW_NEW      shift, and go to state 14
    TOK_KW_NULL     shift, and go to state 16
    TOK_LIT_INT     shift, and go to state 17
    TOK_LIT_CHAR    shift, and go to state 18
    TOK_LIT_STRING  shift, and go to state 19
    '('             shift, and go to state 23
    '+'             shift, and go to state 25
    '-'             shift, and go to state 26
    '!'             shift, and go to state 27
    TOK_KW_CHR      shift, and go to state 28
    TOK_KW_ORD      shift, and go to state 29

    UNOP       go to state 40
    expr       go to state 81
    allocator  go to state 42
    call       go to state 43
    variable   go to state 44
    constant   go to state 45


state 48

   38 return: TOK_KW_RETURN ';' .

    $default  reduce using rule 38 (return)


state 49

   39 return: TOK_KW_RETURN expr . ';'
   58 expr: expr . BINOP expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_KW_IDENT

    ';'          shift, and go to state 82
    '='          shift, and go to state 64
    '<'          shift, and go to state 65
    '>'          shift, and go to state 66
    TOK_LESSEQU  shift, and go to state 67
    TOK_GREAEQU  shift, and go to state 68
    TOK_NEQUAL   shift, and go to state 69
    TOK_EQUALS   shift, and go to state 70
    '+'          shift, and go to state 71
    '-'          shift, and go to state 72
    '*'          shift, and go to state 73
    '/'          shift, and go to state 74
    '%'          shift, and go to state 75
    '['          shift, and go to state 76
    '.'          shift, and go to state 77

    BINOP  go to state 78


state 50

   65 allocator: TOK_KW_NEW TOK_KW_IDENT . '(' ')'

    '('  shift, and go to state 83


state 51

   15 basetype: TOK_KW_STRING .
   66 allocator: TOK_KW_NEW TOK_KW_STRING . '(' expr ')'

    '('  shift, and go to state 84

    $default  reduce using rule 15 (basetype)


state 52

   67 allocator: TOK_KW_NEW basetype . '[' expr ']'

    '['  shift, and go to state 85


state 53

    6 structdef: TOK_KW_STRUCT TOK_KW_IDENT . '{' mfielddecl '}'

    '{'  shift, and go to state 86


state 54

   24 blokargs: blokargs . statement
   26 block: '{' blokargs . '}'

    TOK_KW_IDENT    shift, and go to state 4
    TOK_KW_VOID     shift, and go to state 5
    TOK_KW_BOOL     shift, and go to state 6
    TOK_KW_CHAR     shift, and go to state 7
    TOK_KW_INT      shift, and go to state 8
    TOK_KW_STRING   shift, and go to state 9
    TOK_KW_WHILE    shift, and go to state 10
    TOK_KW_RETURN   shift, and go to state 11
    TOK_KW_FALSE    shift, and go to state 12
    TOK_KW_TRUE     shift, and go to state 13
    TOK_KW_NEW      shift, and go to state 14
    TOK_KW_NULL     shift, and go to state 16
    TOK_LIT_INT     shift, and go to state 17
    TOK_LIT_CHAR    shift, and go to state 18
    TOK_LIT_STRING  shift, and go to state 19
    TOK_TYPEID      shift, and go to state 20
    ';'             shift, and go to state 21
    '}'             shift, and go to state 87
    '{'             shift, and go to state 22
    '('             shift, and go to state 23
    TOK_KW_IF       shift, and go to state 24
    '+'             shift, and go to state 25
    '-'             shift, and go to state 26
    '!'             shift, and go to state 27
    TOK_KW_CHR      shift, and go to state 28
    TOK_KW_ORD      shift, and go to state 29

    basetype   go to state 31
    identdecl  go to state 88
    block      go to state 34
    statement  go to state 89
    vardecl    go to state 36
    while      go to state 37
    ifelse     go to state 38
    return     go to state 39
    UNOP       go to state 40
    expr       go to state 41
    allocator  go to state 42
    call       go to state 43
    variable   go to state 44
    constant   go to state 45


state 55

   58 expr: expr . BINOP expr
   62     | '(' expr . ')'
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_KW_IDENT

    ')'          shift, and go to state 90
    '='          shift, and go to state 64
    '<'          shift, and go to state 65
    '>'          shift, and go to state 66
    TOK_LESSEQU  shift, and go to state 67
    TOK_GREAEQU  shift, and go to state 68
    TOK_NEQUAL   shift, and go to state 69
    TOK_EQUALS   shift, and go to state 70
    '+'          shift, and go to state 71
    '-'          shift, and go to state 72
    '*'          shift, and go to state 73
    '/'          shift, and go to state 74
    '%'          shift, and go to state 75
    '['          shift, and go to state 76
    '.'          shift, and go to state 77

    BINOP  go to state 78


state 56

   36 ifelse: TOK_KW_IF '(' . expr ')' statement
   37       | TOK_KW_IF '(' . expr ')' statement TOK_KW_ELSE statement

    TOK_KW_IDENT    shift, and go to state 4
    TOK_KW_FALSE    shift, and go to state 12
    TOK_KW_TRUE     shift, and go to state 13
    TOK_KW_NEW      shift, and go to state 14
    TOK_KW_NULL     shift, and go to state 16
    TOK_LIT_INT     shift, and go to state 17
    TOK_LIT_CHAR    shift, and go to state 18
    TOK_LIT_STRING  shift, and go to state 19
    '('             shift, and go to state 23
    '+'             shift, and go to state 25
    '-'             shift, and go to state 26
    '!'             shift, and go to state 27
    TOK_KW_CHR      shift, and go to state 28
    TOK_KW_ORD      shift, and go to state 29

    UNOP       go to state 40
    expr       go to state 91
    allocator  go to state 42
    call       go to state 43
    variable   go to state 44
    constant   go to state 45


state 57

   22 identdecl: basetype TOK_KW_IDENT .

    $default  reduce using rule 22 (identdecl)


state 58

   23 identdecl: basetype TOK_NEWARRAY . TOK_KW_IDENT

    TOK_KW_IDENT  shift, and go to state 92


state 59

   20 param: '(' . funcargs ')'

    TOK_KW_VOID    shift, and go to state 5
    TOK_KW_BOOL    shift, and go to state 6
    TOK_KW_CHAR    shift, and go to state 7
    TOK_KW_INT     shift, and go to state 8
    TOK_KW_STRING  shift, and go to state 9
    TOK_TYPEID     shift, and go to state 20

    $default  reduce using rule 19 (funcargs)

    basetype   go to state 31
    funcargs   go to state 93
    identdecl  go to state 94


state 60

   34 vardecl: identdecl '=' . expr ';'

    TOK_KW_IDENT    shift, and go to state 4
    TOK_KW_FALSE    shift, and go to state 12
    TOK_KW_TRUE     shift, and go to state 13
    TOK_KW_NEW      shift, and go to state 14
    TOK_KW_NULL     shift, and go to state 16
    TOK_LIT_INT     shift, and go to state 17
    TOK_LIT_CHAR    shift, and go to state 18
    TOK_LIT_STRING  shift, and go to state 19
    '('             shift, and go to state 23
    '+'             shift, and go to state 25
    '-'             shift, and go to state 26
    '!'             shift, and go to state 27
    TOK_KW_CHR      shift, and go to state 28
    TOK_KW_ORD      shift, and go to state 29

    UNOP       go to state 40
    expr       go to state 95
    allocator  go to state 42
    call       go to state 43
    variable   go to state 44
    constant   go to state 45


state 61

   21 function: identdecl param . block

    ';'  shift, and go to state 21
    '{'  shift, and go to state 22

    block  go to state 96


state 62

   58 expr: expr . BINOP expr
   59     | UNOP expr .
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_KW_IDENT

    '='          shift, and go to state 64
    '<'          shift, and go to state 65
    '>'          shift, and go to state 66
    TOK_LESSEQU  shift, and go to state 67
    TOK_GREAEQU  shift, and go to state 68
    TOK_NEQUAL   shift, and go to state 69
    TOK_EQUALS   shift, and go to state 70
    '+'          shift, and go to state 71
    '-'          shift, and go to state 72
    '*'          shift, and go to state 73
    '/'          shift, and go to state 74
    '%'          shift, and go to state 75
    '['          shift, and go to state 76
    '.'          shift, and go to state 77

    '='          [reduce using rule 59 (expr)]
    '<'          [reduce using rule 59 (expr)]
    '>'          [reduce using rule 59 (expr)]
    TOK_LESSEQU  [reduce using rule 59 (expr)]
    TOK_GREAEQU  [reduce using rule 59 (expr)]
    TOK_NEQUAL   [reduce using rule 59 (expr)]
    TOK_EQUALS   [reduce using rule 59 (expr)]
    '+'          [reduce using rule 59 (expr)]
    '-'          [reduce using rule 59 (expr)]
    '*'          [reduce using rule 59 (expr)]
    '/'          [reduce using rule 59 (expr)]
    '%'          [reduce using rule 59 (expr)]
    '['          [reduce using rule 59 (expr)]
    '.'          [reduce using rule 59 (expr)]
    $default     reduce using rule 59 (expr)

    BINOP  go to state 78


state 63

   33 statement: expr ';' .

    $default  reduce using rule 33 (statement)


state 64

   45 BINOP: '=' .

    $default  reduce using rule 45 (BINOP)


state 65

   48 BINOP: '<' .

    $default  reduce using rule 48 (BINOP)


state 66

   50 BINOP: '>' .

    $default  reduce using rule 50 (BINOP)


state 67

   51 BINOP: TOK_LESSEQU .

    $default  reduce using rule 51 (BINOP)


state 68

   49 BINOP: TOK_GREAEQU .

    $default  reduce using rule 49 (BINOP)


state 69

   47 BINOP: TOK_NEQUAL .

    $default  reduce using rule 47 (BINOP)


state 70

   46 BINOP: TOK_EQUALS .

    $default  reduce using rule 46 (BINOP)


state 71

   40 BINOP: '+' .

    $default  reduce using rule 40 (BINOP)


state 72

   41 BINOP: '-' .

    $default  reduce using rule 41 (BINOP)


state 73

   42 BINOP: '*' .

    $default  reduce using rule 42 (BINOP)


state 74

   43 BINOP: '/' .

    $default  reduce using rule 43 (BINOP)


state 75

   44 BINOP: '%' .

    $default  reduce using rule 44 (BINOP)


state 76

   73 variable: expr '[' . expr ']'

    TOK_KW_IDENT    shift, and go to state 4
    TOK_KW_FALSE    shift, and go to state 12
    TOK_KW_TRUE     shift, and go to state 13
    TOK_KW_NEW      shift, and go to state 14
    TOK_KW_NULL     shift, and go to state 16
    TOK_LIT_INT     shift, and go to state 17
    TOK_LIT_CHAR    shift, and go to state 18
    TOK_LIT_STRING  shift, and go to state 19
    '('             shift, and go to state 23
    '+'             shift, and go to state 25
    '-'             shift, and go to state 26
    '!'             shift, and go to state 27
    TOK_KW_CHR      shift, and go to state 28
    TOK_KW_ORD      shift, and go to state 29

    UNOP       go to state 40
    expr       go to state 97
    allocator  go to state 42
    call       go to state 43
    variable   go to state 44
    constant   go to state 45


state 77

   74 variable: expr '.' . TOK_KW_IDENT

    TOK_KW_IDENT  shift, and go to state 98


state 78

   58 expr: expr BINOP . expr

    TOK_KW_IDENT    shift, and go to state 4
    TOK_KW_FALSE    shift, and go to state 12
    TOK_KW_TRUE     shift, and go to state 13
    TOK_KW_NEW      shift, and go to state 14
    TOK_KW_NULL     shift, and go to state 16
    TOK_LIT_INT     shift, and go to state 17
    TOK_LIT_CHAR    shift, and go to state 18
    TOK_LIT_STRING  shift, and go to state 19
    '('             shift, and go to state 23
    '+'             shift, and go to state 25
    '-'             shift, and go to state 26
    '!'             shift, and go to state 27
    TOK_KW_CHR      shift, and go to state 28
    TOK_KW_ORD      shift, and go to state 29

    UNOP       go to state 40
    expr       go to state 99
    allocator  go to state 42
    call       go to state 43
    variable   go to state 44
    constant   go to state 45


state 79

   58 expr: expr . BINOP expr
   69 args: expr .
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_KW_IDENT

    '='          shift, and go to state 64
    '<'          shift, and go to state 65
    '>'          shift, and go to state 66
    TOK_LESSEQU  shift, and go to state 67
    TOK_GREAEQU  shift, and go to state 68
    TOK_NEQUAL   shift, and go to state 69
    TOK_EQUALS   shift, and go to state 70
    '+'          shift, and go to state 71
    '-'          shift, and go to state 72
    '*'          shift, and go to state 73
    '/'          shift, and go to state 74
    '%'          shift, and go to state 75
    '['          shift, and go to state 76
    '.'          shift, and go to state 77

    $default  reduce using rule 69 (args)

    BINOP  go to state 78


state 80

   68 args: args . ',' expr
   71 call: TOK_KW_IDENT '(' args . ')'

    ','  shift, and go to state 100
    ')'  shift, and go to state 101


state 81

   35 while: TOK_KW_WHILE '(' expr . ')' statement
   58 expr: expr . BINOP expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_KW_IDENT

    ')'          shift, and go to state 102
    '='          shift, and go to state 64
    '<'          shift, and go to state 65
    '>'          shift, and go to state 66
    TOK_LESSEQU  shift, and go to state 67
    TOK_GREAEQU  shift, and go to state 68
    TOK_NEQUAL   shift, and go to state 69
    TOK_EQUALS   shift, and go to state 70
    '+'          shift, and go to state 71
    '-'          shift, and go to state 72
    '*'          shift, and go to state 73
    '/'          shift, and go to state 74
    '%'          shift, and go to state 75
    '['          shift, and go to state 76
    '.'          shift, and go to state 77

    BINOP  go to state 78


state 82

   39 return: TOK_KW_RETURN expr ';' .

    $default  reduce using rule 39 (return)


state 83

   65 allocator: TOK_KW_NEW TOK_KW_IDENT '(' . ')'

    ')'  shift, and go to state 103


state 84

   66 allocator: TOK_KW_NEW TOK_KW_STRING '(' . expr ')'

    TOK_KW_IDENT    shift, and go to state 4
    TOK_KW_FALSE    shift, and go to state 12
    TOK_KW_TRUE     shift, and go to state 13
    TOK_KW_NEW      shift, and go to state 14
    TOK_KW_NULL     shift, and go to state 16
    TOK_LIT_INT     shift, and go to state 17
    TOK_LIT_CHAR    shift, and go to state 18
    TOK_LIT_STRING  shift, and go to state 19
    '('             shift, and go to state 23
    '+'             shift, and go to state 25
    '-'             shift, and go to state 26
    '!'             shift, and go to state 27
    TOK_KW_CHR      shift, and go to state 28
    TOK_KW_ORD      shift, and go to state 29

    UNOP       go to state 40
    expr       go to state 104
    allocator  go to state 42
    call       go to state 43
    variable   go to state 44
    constant   go to state 45


state 85

   67 allocator: TOK_KW_NEW basetype '[' . expr ']'

    TOK_KW_IDENT    shift, and go to state 4
    TOK_KW_FALSE    shift, and go to state 12
    TOK_KW_TRUE     shift, and go to state 13
    TOK_KW_NEW      shift, and go to state 14
    TOK_KW_NULL     shift, and go to state 16
    TOK_LIT_INT     shift, and go to state 17
    TOK_LIT_CHAR    shift, and go to state 18
    TOK_LIT_STRING  shift, and go to state 19
    '('             shift, and go to state 23
    '+'             shift, and go to state 25
    '-'             shift, and go to state 26
    '!'             shift, and go to state 27
    TOK_KW_CHR      shift, and go to state 28
    TOK_KW_ORD      shift, and go to state 29

    UNOP       go to state 40
    expr       go to state 105
    allocator  go to state 42
    call       go to state 43
    variable   go to state 44
    constant   go to state 45


state 86

    6 structdef: TOK_KW_STRUCT TOK_KW_IDENT '{' . mfielddecl '}'

    $default  reduce using rule 8 (mfielddecl)

    mfielddecl  go to state 106


state 87

   26 block: '{' blokargs '}' .

    $default  reduce using rule 26 (block)


state 88

   34 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 60


state 89

   24 blokargs: blokargs statement .

    $default  reduce using rule 24 (blokargs)


state 90

   62 expr: '(' expr ')' .

    $default  reduce using rule 62 (expr)


state 91

   36 ifelse: TOK_KW_IF '(' expr . ')' statement
   37       | TOK_KW_IF '(' expr . ')' statement TOK_KW_ELSE statement
   58 expr: expr . BINOP expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_KW_IDENT

    ')'          shift, and go to state 107
    '='          shift, and go to state 64
    '<'          shift, and go to state 65
    '>'          shift, and go to state 66
    TOK_LESSEQU  shift, and go to state 67
    TOK_GREAEQU  shift, and go to state 68
    TOK_NEQUAL   shift, and go to state 69
    TOK_EQUALS   shift, and go to state 70
    '+'          shift, and go to state 71
    '-'          shift, and go to state 72
    '*'          shift, and go to state 73
    '/'          shift, and go to state 74
    '%'          shift, and go to state 75
    '['          shift, and go to state 76
    '.'          shift, and go to state 77

    BINOP  go to state 78


state 92

   23 identdecl: basetype TOK_NEWARRAY TOK_KW_IDENT .

    $default  reduce using rule 23 (identdecl)


state 93

   17 funcargs: funcargs . ',' identdecl
   20 param: '(' funcargs . ')'

    ','  shift, and go to state 108
    ')'  shift, and go to state 109


state 94

   18 funcargs: identdecl .

    $default  reduce using rule 18 (funcargs)


state 95

   34 vardecl: identdecl '=' expr . ';'
   58 expr: expr . BINOP expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_KW_IDENT

    ';'          shift, and go to state 110
    '='          shift, and go to state 64
    '<'          shift, and go to state 65
    '>'          shift, and go to state 66
    TOK_LESSEQU  shift, and go to state 67
    TOK_GREAEQU  shift, and go to state 68
    TOK_NEQUAL   shift, and go to state 69
    TOK_EQUALS   shift, and go to state 70
    '+'          shift, and go to state 71
    '-'          shift, and go to state 72
    '*'          shift, and go to state 73
    '/'          shift, and go to state 74
    '%'          shift, and go to state 75
    '['          shift, and go to state 76
    '.'          shift, and go to state 77

    BINOP  go to state 78


state 96

   21 function: identdecl param block .

    $default  reduce using rule 21 (function)


state 97

   58 expr: expr . BINOP expr
   73 variable: expr . '[' expr ']'
   73         | expr '[' expr . ']'
   74         | expr . '.' TOK_KW_IDENT

    ']'          shift, and go to state 111
    '='          shift, and go to state 64
    '<'          shift, and go to state 65
    '>'          shift, and go to state 66
    TOK_LESSEQU  shift, and go to state 67
    TOK_GREAEQU  shift, and go to state 68
    TOK_NEQUAL   shift, and go to state 69
    TOK_EQUALS   shift, and go to state 70
    '+'          shift, and go to state 71
    '-'          shift, and go to state 72
    '*'          shift, and go to state 73
    '/'          shift, and go to state 74
    '%'          shift, and go to state 75
    '['          shift, and go to state 76
    '.'          shift, and go to state 77

    BINOP  go to state 78


state 98

   74 variable: expr '.' TOK_KW_IDENT .

    $default  reduce using rule 74 (variable)


state 99

   58 expr: expr . BINOP expr
   58     | expr BINOP expr .
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_KW_IDENT

    '='          shift, and go to state 64
    '<'          shift, and go to state 65
    '>'          shift, and go to state 66
    TOK_LESSEQU  shift, and go to state 67
    TOK_GREAEQU  shift, and go to state 68
    TOK_NEQUAL   shift, and go to state 69
    TOK_EQUALS   shift, and go to state 70
    '+'          shift, and go to state 71
    '-'          shift, and go to state 72
    '*'          shift, and go to state 73
    '/'          shift, and go to state 74
    '%'          shift, and go to state 75
    '['          shift, and go to state 76
    '.'          shift, and go to state 77

    '='          [reduce using rule 58 (expr)]
    '<'          [reduce using rule 58 (expr)]
    '>'          [reduce using rule 58 (expr)]
    TOK_LESSEQU  [reduce using rule 58 (expr)]
    TOK_GREAEQU  [reduce using rule 58 (expr)]
    TOK_NEQUAL   [reduce using rule 58 (expr)]
    TOK_EQUALS   [reduce using rule 58 (expr)]
    '+'          [reduce using rule 58 (expr)]
    '-'          [reduce using rule 58 (expr)]
    '*'          [reduce using rule 58 (expr)]
    '/'          [reduce using rule 58 (expr)]
    '%'          [reduce using rule 58 (expr)]
    '['          [reduce using rule 58 (expr)]
    '.'          [reduce using rule 58 (expr)]
    $default     reduce using rule 58 (expr)

    BINOP  go to state 78


state 100

   68 args: args ',' . expr

    TOK_KW_IDENT    shift, and go to state 4
    TOK_KW_FALSE    shift, and go to state 12
    TOK_KW_TRUE     shift, and go to state 13
    TOK_KW_NEW      shift, and go to state 14
    TOK_KW_NULL     shift, and go to state 16
    TOK_LIT_INT     shift, and go to state 17
    TOK_LIT_CHAR    shift, and go to state 18
    TOK_LIT_STRING  shift, and go to state 19
    '('             shift, and go to state 23
    '+'             shift, and go to state 25
    '-'             shift, and go to state 26
    '!'             shift, and go to state 27
    TOK_KW_CHR      shift, and go to state 28
    TOK_KW_ORD      shift, and go to state 29

    UNOP       go to state 40
    expr       go to state 112
    allocator  go to state 42
    call       go to state 43
    variable   go to state 44
    constant   go to state 45


state 101

   71 call: TOK_KW_IDENT '(' args ')' .

    $default  reduce using rule 71 (call)


state 102

   35 while: TOK_KW_WHILE '(' expr ')' . statement

    TOK_KW_IDENT    shift, and go to state 4
    TOK_KW_VOID     shift, and go to state 5
    TOK_KW_BOOL     shift, and go to state 6
    TOK_KW_CHAR     shift, and go to state 7
    TOK_KW_INT      shift, and go to state 8
    TOK_KW_STRING   shift, and go to state 9
    TOK_KW_WHILE    shift, and go to state 10
    TOK_KW_RETURN   shift, and go to state 11
    TOK_KW_FALSE    shift, and go to state 12
    TOK_KW_TRUE     shift, and go to state 13
    TOK_KW_NEW      shift, and go to state 14
    TOK_KW_NULL     shift, and go to state 16
    TOK_LIT_INT     shift, and go to state 17
    TOK_LIT_CHAR    shift, and go to state 18
    TOK_LIT_STRING  shift, and go to state 19
    TOK_TYPEID      shift, and go to state 20
    ';'             shift, and go to state 21
    '{'             shift, and go to state 22
    '('             shift, and go to state 23
    TOK_KW_IF       shift, and go to state 24
    '+'             shift, and go to state 25
    '-'             shift, and go to state 26
    '!'             shift, and go to state 27
    TOK_KW_CHR      shift, and go to state 28
    TOK_KW_ORD      shift, and go to state 29

    basetype   go to state 31
    identdecl  go to state 88
    block      go to state 34
    statement  go to state 113
    vardecl    go to state 36
    while      go to state 37
    ifelse     go to state 38
    return     go to state 39
    UNOP       go to state 40
    expr       go to state 41
    allocator  go to state 42
    call       go to state 43
    variable   go to state 44
    constant   go to state 45


state 103

   65 allocator: TOK_KW_NEW TOK_KW_IDENT '(' ')' .

    $default  reduce using rule 65 (allocator)


state 104

   58 expr: expr . BINOP expr
   66 allocator: TOK_KW_NEW TOK_KW_STRING '(' expr . ')'
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_KW_IDENT

    ')'          shift, and go to state 114
    '='          shift, and go to state 64
    '<'          shift, and go to state 65
    '>'          shift, and go to state 66
    TOK_LESSEQU  shift, and go to state 67
    TOK_GREAEQU  shift, and go to state 68
    TOK_NEQUAL   shift, and go to state 69
    TOK_EQUALS   shift, and go to state 70
    '+'          shift, and go to state 71
    '-'          shift, and go to state 72
    '*'          shift, and go to state 73
    '/'          shift, and go to state 74
    '%'          shift, and go to state 75
    '['          shift, and go to state 76
    '.'          shift, and go to state 77

    BINOP  go to state 78


state 105

   58 expr: expr . BINOP expr
   67 allocator: TOK_KW_NEW basetype '[' expr . ']'
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_KW_IDENT

    ']'          shift, and go to state 115
    '='          shift, and go to state 64
    '<'          shift, and go to state 65
    '>'          shift, and go to state 66
    TOK_LESSEQU  shift, and go to state 67
    TOK_GREAEQU  shift, and go to state 68
    TOK_NEQUAL   shift, and go to state 69
    TOK_EQUALS   shift, and go to state 70
    '+'          shift, and go to state 71
    '-'          shift, and go to state 72
    '*'          shift, and go to state 73
    '/'          shift, and go to state 74
    '%'          shift, and go to state 75
    '['          shift, and go to state 76
    '.'          shift, and go to state 77

    BINOP  go to state 78


state 106

    6 structdef: TOK_KW_STRUCT TOK_KW_IDENT '{' mfielddecl . '}'
    7 mfielddecl: mfielddecl . fielddecl ';'

    TOK_KW_VOID    shift, and go to state 5
    TOK_KW_BOOL    shift, and go to state 6
    TOK_KW_CHAR    shift, and go to state 7
    TOK_KW_INT     shift, and go to state 8
    TOK_KW_STRING  shift, and go to state 9
    TOK_TYPEID     shift, and go to state 20
    '}'            shift, and go to state 116

    fielddecl  go to state 117
    basetype   go to state 118


state 107

   36 ifelse: TOK_KW_IF '(' expr ')' . statement
   37       | TOK_KW_IF '(' expr ')' . statement TOK_KW_ELSE statement

    TOK_KW_IDENT    shift, and go to state 4
    TOK_KW_VOID     shift, and go to state 5
    TOK_KW_BOOL     shift, and go to state 6
    TOK_KW_CHAR     shift, and go to state 7
    TOK_KW_INT      shift, and go to state 8
    TOK_KW_STRING   shift, and go to state 9
    TOK_KW_WHILE    shift, and go to state 10
    TOK_KW_RETURN   shift, and go to state 11
    TOK_KW_FALSE    shift, and go to state 12
    TOK_KW_TRUE     shift, and go to state 13
    TOK_KW_NEW      shift, and go to state 14
    TOK_KW_NULL     shift, and go to state 16
    TOK_LIT_INT     shift, and go to state 17
    TOK_LIT_CHAR    shift, and go to state 18
    TOK_LIT_STRING  shift, and go to state 19
    TOK_TYPEID      shift, and go to state 20
    ';'             shift, and go to state 21
    '{'             shift, and go to state 22
    '('             shift, and go to state 23
    TOK_KW_IF       shift, and go to state 24
    '+'             shift, and go to state 25
    '-'             shift, and go to state 26
    '!'             shift, and go to state 27
    TOK_KW_CHR      shift, and go to state 28
    TOK_KW_ORD      shift, and go to state 29

    basetype   go to state 31
    identdecl  go to state 88
    block      go to state 34
    statement  go to state 119
    vardecl    go to state 36
    while      go to state 37
    ifelse     go to state 38
    return     go to state 39
    UNOP       go to state 40
    expr       go to state 41
    allocator  go to state 42
    call       go to state 43
    variable   go to state 44
    constant   go to state 45


state 108

   17 funcargs: funcargs ',' . identdecl

    TOK_KW_VOID    shift, and go to state 5
    TOK_KW_BOOL    shift, and go to state 6
    TOK_KW_CHAR    shift, and go to state 7
    TOK_KW_INT     shift, and go to state 8
    TOK_KW_STRING  shift, and go to state 9
    TOK_TYPEID     shift, and go to state 20

    basetype   go to state 31
    identdecl  go to state 120


state 109

   20 param: '(' funcargs ')' .

    $default  reduce using rule 20 (param)


state 110

   34 vardecl: identdecl '=' expr ';' .

    $default  reduce using rule 34 (vardecl)


state 111

   73 variable: expr '[' expr ']' .

    $default  reduce using rule 73 (variable)


state 112

   58 expr: expr . BINOP expr
   68 args: args ',' expr .
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_KW_IDENT

    '='          shift, and go to state 64
    '<'          shift, and go to state 65
    '>'          shift, and go to state 66
    TOK_LESSEQU  shift, and go to state 67
    TOK_GREAEQU  shift, and go to state 68
    TOK_NEQUAL   shift, and go to state 69
    TOK_EQUALS   shift, and go to state 70
    '+'          shift, and go to state 71
    '-'          shift, and go to state 72
    '*'          shift, and go to state 73
    '/'          shift, and go to state 74
    '%'          shift, and go to state 75
    '['          shift, and go to state 76
    '.'          shift, and go to state 77

    $default  reduce using rule 68 (args)

    BINOP  go to state 78


state 113

   35 while: TOK_KW_WHILE '(' expr ')' statement .

    $default  reduce using rule 35 (while)


state 114

   66 allocator: TOK_KW_NEW TOK_KW_STRING '(' expr ')' .

    $default  reduce using rule 66 (allocator)


state 115

   67 allocator: TOK_KW_NEW basetype '[' expr ']' .

    $default  reduce using rule 67 (allocator)


state 116

    6 structdef: TOK_KW_STRUCT TOK_KW_IDENT '{' mfielddecl '}' .

    $default  reduce using rule 6 (structdef)


state 117

    7 mfielddecl: mfielddecl fielddecl . ';'

    ';'  shift, and go to state 121


state 118

    9 fielddecl: basetype . TOK_KW_IDENT
   10          | basetype . TOK_NEWARRAY TOK_FIELD

    TOK_KW_IDENT  shift, and go to state 122
    TOK_NEWARRAY  shift, and go to state 123


state 119

   36 ifelse: TOK_KW_IF '(' expr ')' statement .
   37       | TOK_KW_IF '(' expr ')' statement . TOK_KW_ELSE statement

    TOK_KW_ELSE  shift, and go to state 124

    $default  reduce using rule 36 (ifelse)


state 120

   17 funcargs: funcargs ',' identdecl .

    $default  reduce using rule 17 (funcargs)


state 121

    7 mfielddecl: mfielddecl fielddecl ';' .

    $default  reduce using rule 7 (mfielddecl)


state 122

    9 fielddecl: basetype TOK_KW_IDENT .

    $default  reduce using rule 9 (fielddecl)


state 123

   10 fielddecl: basetype TOK_NEWARRAY . TOK_FIELD

    TOK_FIELD  shift, and go to state 125


state 124

   37 ifelse: TOK_KW_IF '(' expr ')' statement TOK_KW_ELSE . statement

    TOK_KW_IDENT    shift, and go to state 4
    TOK_KW_VOID     shift, and go to state 5
    TOK_KW_BOOL     shift, and go to state 6
    TOK_KW_CHAR     shift, and go to state 7
    TOK_KW_INT      shift, and go to state 8
    TOK_KW_STRING   shift, and go to state 9
    TOK_KW_WHILE    shift, and go to state 10
    TOK_KW_RETURN   shift, and go to state 11
    TOK_KW_FALSE    shift, and go to state 12
    TOK_KW_TRUE     shift, and go to state 13
    TOK_KW_NEW      shift, and go to state 14
    TOK_KW_NULL     shift, and go to state 16
    TOK_LIT_INT     shift, and go to state 17
    TOK_LIT_CHAR    shift, and go to state 18
    TOK_LIT_STRING  shift, and go to state 19
    TOK_TYPEID      shift, and go to state 20
    ';'             shift, and go to state 21
    '{'             shift, and go to state 22
    '('             shift, and go to state 23
    TOK_KW_IF       shift, and go to state 24
    '+'             shift, and go to state 25
    '-'             shift, and go to state 26
    '!'             shift, and go to state 27
    TOK_KW_CHR      shift, and go to state 28
    TOK_KW_ORD      shift, and go to state 29

    basetype   go to state 31
    identdecl  go to state 88
    block      go to state 34
    statement  go to state 126
    vardecl    go to state 36
    while      go to state 37
    ifelse     go to state 38
    return     go to state 39
    UNOP       go to state 40
    expr       go to state 41
    allocator  go to state 42
    call       go to state 43
    variable   go to state 44
    constant   go to state 45


state 125

   10 fielddecl: basetype TOK_NEWARRAY TOK_FIELD .

    $default  reduce using rule 10 (fielddecl)


state 126

   37 ifelse: TOK_KW_IF '(' expr ')' statement TOK_KW_ELSE statement .

    $default  reduce using rule 37 (ifelse)
